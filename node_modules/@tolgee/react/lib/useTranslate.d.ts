import * as React from 'react';
import { TranslationTags, TranslationParams } from '@tolgee/core';
import { ParamsTags } from './types';
declare type UseTranslateResultFnProps<T extends TranslationParams | ParamsTags> = {
    key: string;
    parameters?: T;
    noWrap?: boolean;
    defaultValue?: string;
};
declare type ReturnFnType = {
    <T extends TranslationParams | ParamsTags = TranslationParams>(props: UseTranslateResultFnProps<T>): T extends TranslationParams ? string : TranslationTags<React.ReactNode>;
    (key: string, defaultValue?: string, noWrap?: boolean): string;
    <T extends TranslationParams | ParamsTags = TranslationParams>(key: string, defaultValue?: string, parameters?: T): T extends TranslationParams ? string : TranslationTags<React.ReactNode>;
    <T extends TranslationParams | ParamsTags = TranslationParams>(key: string, parameters?: T, defaultValue?: string): T extends TranslationParams ? string : TranslationTags<React.ReactNode>;
    <T extends TranslationParams | ParamsTags = TranslationParams>(key: string, parameters?: T, noWrap?: boolean, defaultValue?: string): T extends TranslationParams ? string : TranslationTags<React.ReactNode>;
};
export declare const useTranslate: () => ReturnFnType;
export {};
