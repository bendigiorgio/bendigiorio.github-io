(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@tolgee/core')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react', '@tolgee/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@tolgee/react"] = {}, global.React, global["@tolgee/core"]));
})(this, (function (exports, React, core) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    var TolgeeProviderContext = React__default["default"].createContext(null);
    var TolgeeProvider = function (props) {
        var config = __assign({}, props);
        delete config.children;
        delete config.loadingFallback;
        var _a = __read(React.useState(core.Tolgee.use(core.IcuFormatter).init(__assign({ wrapperMode: 'invisible', ui: process.env.NODE_ENV !== 'development'
                ? undefined
                : typeof require !== 'undefined'
                    ? require('@tolgee/ui')
                    : import('@tolgee/ui') }, config))), 1), tolgee = _a[0];
        var _b = __read(React.useState(tolgee.initialLoading), 2), loading = _b[0], setLoading = _b[1];
        //rerender components on forceLanguage change
        React.useEffect(function () {
            if (config.forceLanguage !== undefined) {
                tolgee.properties.config.forceLanguage = config.forceLanguage;
                tolgee.lang = config.forceLanguage;
            }
        }, [config.forceLanguage]);
        React.useEffect(function () {
            tolgee.run().then(function () { return setLoading(false); });
            return function () {
                tolgee.stop();
            };
        }, []);
        return (React__default["default"].createElement(TolgeeProviderContext.Provider, { value: __assign(__assign({}, props), { tolgee: tolgee }) }, !loading ? props.children : props.loadingFallback));
    };

    var useTolgeeContext = function () {
        var context = React.useContext(TolgeeProviderContext);
        if (context === null) {
            throw new Error('Tolgee context is null. Is this code executed inside TolgeeProvider component?');
        }
        return context;
    };

    var wrapTagHandlers = function (params) {
        if (!params) {
            return undefined;
        }
        var result = {};
        Object.entries(params || {}).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            if (typeof value === 'function') {
                result[key] = function (chunk) {
                    return value(addReactKeys(chunk));
                };
            }
            else if (React__default["default"].isValidElement(value)) {
                var el_1 = value;
                result[key] = function (chunk) {
                    return __assign(__assign({}, el_1), { props: __assign(__assign({}, el_1.props), { children: addReactKeys(chunk) }) });
                };
            }
            else {
                result[key] = value;
            }
        });
        return result;
    };
    var addReactKeys = function (val) {
        if (Array.isArray(val)) {
            return React__default["default"].Children.toArray(val);
        }
        else {
            return val;
        }
    };

    var useTranslate = function () {
        var tolgee = useTolgeeContext().tolgee;
        var isMounted = React.useRef(false);
        // dummy state to enable re-rendering
        var _a = __read(React.useState(0), 2), instance = _a[0], setInstance = _a[1];
        React.useEffect(function () {
            isMounted.current = true;
            return function () {
                isMounted.current = false;
            };
        }, []);
        var forceRerender = React.useCallback(function () {
            if (isMounted.current) {
                setInstance(function (v) { return v + 1; });
            }
        }, [setInstance, isMounted]);
        // cache of translations translated with this useTranslate
        var keysRef = React.useRef([]);
        var resetMemory = function (key) {
            keysRef.current = key ? keysRef.current.filter(function (k) { return k !== key; }) : [];
        };
        React.useEffect(function () {
            var subscription = tolgee.onTranslationChange.subscribe(function (_a) {
                var key = _a.key;
                if (keysRef.current.includes(key)) {
                    resetMemory(key);
                    forceRerender();
                }
            });
            return function () { return subscription.unsubscribe(); };
        }, [tolgee]);
        React.useEffect(function () {
            var subscription = tolgee.onLangChange.subscribe(function () {
                if (keysRef.current.length) {
                    resetMemory();
                    forceRerender();
                }
            });
            return function () { return subscription.unsubscribe(); };
        }, [tolgee]);
        var getTranslation = React.useCallback(function (key, params, noWrap, defaultValue) {
            var firstRender = !keysRef.current.includes(key);
            var translation = tolgee.instant({
                key: key,
                params: wrapTagHandlers(params),
                noWrap: noWrap,
                defaultValue: defaultValue,
            });
            if (firstRender) {
                keysRef.current.push(key);
                tolgee
                    .translate({
                    key: key,
                    params: wrapTagHandlers(params),
                    noWrap: noWrap,
                    defaultValue: defaultValue,
                })
                    .then(function (value) {
                    if (value !== translation) {
                        forceRerender();
                    }
                });
            }
            return translation;
        }, [tolgee, keysRef]);
        var t = React.useCallback(function (keyOrProps) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            var parameters = undefined;
            var noWrap = undefined;
            var defaultValue = undefined;
            // allow user to pass object of params and make the code cleaner
            var key = typeof keyOrProps === 'object' ? keyOrProps.key : keyOrProps;
            if (typeof keyOrProps === 'object') {
                parameters = keyOrProps.parameters;
                noWrap = keyOrProps.noWrap;
                defaultValue = keyOrProps.defaultValue;
            }
            else {
                params.forEach(function (param) {
                    switch (typeof param) {
                        case 'object':
                            parameters = param;
                            break;
                        case 'boolean':
                            noWrap = param;
                            break;
                        case 'string':
                            defaultValue = param;
                    }
                });
            }
            return addReactKeys(getTranslation(key, parameters, noWrap, defaultValue));
        }, [getTranslation, instance]);
        return t;
    };

    /**
     * Custom react hook
     * @return function accepting language abbreviation as parameter
     */
    var useSetLanguage = function () {
        var context = useTolgeeContext();
        return function (language) { return context.tolgee.changeLanguage(language); };
    };

    var T = function (props) {
        var key = props.keyName || props.children;
        if (!key) {
            // eslint-disable-next-line no-console
            console.error('T component: keyName not defined');
        }
        var defaultValue = props.keyName ? props.children : undefined;
        var t = useTranslate();
        var translation = t({
            key: key,
            parameters: props.parameters,
            defaultValue: defaultValue,
            noWrap: props.noWrap,
        });
        return React__default["default"].createElement(React__default["default"].Fragment, null, translation);
    };

    /**
     * Custom react hook
     * @return function accepting language abbreviation as parameter
     */
    var useCurrentLanguage = function () {
        var context = useTolgeeContext();
        //to make react rerender components which are using current language
        var _a = __read(React.useState(context.tolgee.lang), 2), language = _a[0], setLanguage = _a[1];
        React.useEffect(function () {
            var subscription = context.tolgee.onLangChange.subscribe(function (lang) {
                setLanguage(lang);
            });
            return function () {
                subscription.unsubscribe();
            };
        }, []);
        return function () {
            return language;
        };
    };

    exports.T = T;
    exports.TolgeeProvider = TolgeeProvider;
    exports.TolgeeProviderContext = TolgeeProviderContext;
    exports.useCurrentLanguage = useCurrentLanguage;
    exports.useSetLanguage = useSetLanguage;
    exports.useTranslate = useTranslate;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tolgee-react.umd.js.map
