export interface TextInputElementData {
    oldValue: string;
    valueInputs: string[];
    touched: boolean;
    oldPlaceholder: string;
    placeholderInputs: string[];
}
export declare type TreeTranslationsData = {
    [key: string]: string | TreeTranslationsData;
};
export declare type Translations = Record<string, string>;
export declare type TranslationParams = {
    [key: string]: string | number | bigint;
};
export declare type TranslationParamsTags<T> = {
    [key: string]: string | number | bigint | ((value: T | T[]) => T);
};
export declare type TranslateProps = {
    key: string;
    defaultValue?: string;
    params?: TranslationParams;
    noWrap?: boolean;
    orEmpty?: boolean;
};
export declare type TranslatePropsTags<T> = {
    key: string;
    defaultValue?: string;
    params?: TranslationParamsTags<T>;
    noWrap?: boolean;
    orEmpty?: boolean;
};
export declare type InstantProps = {
    key: string;
    defaultValue?: string;
    params?: TranslationParams;
    noWrap?: boolean;
    orEmpty?: boolean;
};
export declare type InstantPropsTags<T> = {
    key: string;
    defaultValue?: string;
    params?: TranslationParamsTags<T>;
    noWrap?: boolean;
    orEmpty?: boolean;
};
export declare type KeyAndParams = {
    key: string;
    params: TranslationParams;
    defaultValue?: string;
};
export declare type KeyAndParamsTags<T> = {
    key: string;
    params: TranslationParamsTags<T>;
    defaultValue?: string;
};
export declare type TranslatedWithMetadata = {
    translated: string;
    key: string;
    params: TranslationParams;
    defaultValue: string | undefined;
};
export declare type TranslatedWithMetadataTags<T> = {
    translated: TranslationTags<T>;
    key: string;
    params: TranslationParamsTags<T>;
    defaultValue: string | undefined;
};
export declare type TranslationTags<T> = string | T[];
export declare type NodeWithMeta = Node & {
    _tolgee: NodeMeta;
};
export declare type NodeWithLock = Node & {
    _tolgee: NodeLock;
};
export declare type ElementWithMeta = Element & ElementCSSInlineStyle & {
    _tolgee: ElementMeta;
};
export declare type ElementMeta = {
    wrappedWithElementOnlyKey?: string;
    wrappedWithElementOnlyDefaultHtml?: string;
    nodes: Set<NodeWithMeta>;
    highlightEl?: HTMLDivElement;
    highlight?: () => void;
    unhighlight?: () => void;
    /**
     * Stops removing of element's inactive nodes and
     * unregistering from ElementRegistrar.
     *
     * It's used when user has mouse on the element, so there is
     * potential, that element highlight will be triggered.
     *
     * Triggering highlight needs the metadata stored on element, so
     * we need the ability to prevent clean.
     */
    preventClean?: boolean;
};
export declare type NodeMeta = {
    oldTextContent: string;
    keys: KeyAndParamsTags<any>[];
} & NodeLock;
export declare type NodeLock = {
    locked?: boolean;
};
export declare type Scope = 'translations.edit' | 'translations.view' | 'keys.edit' | 'screenshots.upload' | 'screenshots.view' | 'screenshots.delete';
export declare type Mode = 'development' | 'production';
export declare type Unwrapped = {
    text: string;
    keys: KeyAndParamsTags<any>[];
};
export interface Formatter {
    format: FormatFunction;
}
interface FormatterStatic {
    type: 'formatter';
    new (): Formatter;
}
export declare type TolgeeModule = FormatterStatic;
export declare type FormatFunction = (props: {
    translation: string;
    params: Record<string, any>;
    language: string;
}) => string | any[];
export {};
