import { Properties } from '../Properties';
import { ElementWithMeta, KeyAndParamsTags, NodeWithMeta } from '../types';
import { ElementRegistrar } from '../services/ElementRegistrar';
import { AbstractWrapper } from './AbstractWrapper';
export declare class NodeHandler {
    private properties;
    private elementRegistrar;
    private wrapper;
    constructor(properties: Properties, elementRegistrar: ElementRegistrar, wrapper: AbstractWrapper);
    static initParentElement(element: Element): ElementWithMeta;
    filterRestricted<T extends Element | Text>(nodes: T[]): T[];
    handleNodes(nodes: Array<Text | Attr>): Promise<void>;
    translateChildNode(node: Text | Attr, newValue: any, keys: KeyAndParamsTags<any>[]): NodeWithMeta;
    private lockNode;
    private unlockNode;
    private getParentElement;
    private getSuitableParent;
}
