import { TolgeeConfig } from './TolgeeConfig';
import { InstantProps, InstantPropsTags, TolgeeModule, TranslateProps, TranslatePropsTags, TranslationTags, TranslationParams, TranslationParamsTags } from './types';
export declare class Tolgee {
    private dependencyService;
    private constructor();
    get properties(): import("./Properties").Properties;
    get lang(): string;
    /**
     * This sets a new language.
     *
     * Using this setter can behave buggy when you change languages
     * too fast, since it changes the language property before
     * translations are actually loaded.
     * @deprecated use asynchronous changeLanguage method.
     */
    set lang(newLanguage: string);
    get defaultLanguage(): string;
    get onLangChange(): import("./services/EventEmitter").EventEmitter<string>;
    get onTranslationChange(): import("./services/EventEmitter").EventEmitter<import(".").TranslationData>;
    /**
     * Is emitted when language is loaded for the first time
     */
    get onLangLoaded(): import("./services/EventEmitter").EventEmitter<string>;
    /**
     * True if loading is needed to wait for Tolgee init.
     * When translation data are provided statically (using import
     * as staticData config property) then there is no need for translation
     * fetching so initial loading is not needed at all.
     */
    get initialLoading(): boolean;
    private get coreService();
    static use(module: TolgeeModule): Tolgee;
    static init(config: TolgeeConfig): Tolgee;
    /**
     * Sets the new language.
     *
     * Emits the onLangChange and onLangChangeAndLoad events after
     * the translations are loaded.
     *
     * @return Promise<void> Resolves when translations are loaded
     */
    changeLanguage(newLanguage: string): Promise<void>;
    use(module: TolgeeModule): this;
    init(config: TolgeeConfig): this;
    run(): Promise<void>;
    refresh(): Promise<void>;
    translate(props: TranslateProps): Promise<string>;
    translate<T>(props: TranslatePropsTags<T>): Promise<TranslationTags<T>>;
    translate(key: string, params?: TranslationParams, noWrap?: boolean, defaultValue?: string): Promise<string>;
    translate<T>(key: string, params?: TranslationParamsTags<T>, noWrap?: boolean, defaultValue?: string): Promise<TranslationTags<T>>;
    wrap(key: string, params?: TranslationParams, defaultValue?: string | undefined, translation?: string): string;
    wrap<T>(key: string, params?: TranslationTags<T>, defaultValue?: string | undefined, translation?: TranslationTags<T>): TranslationTags<T>;
    instant(key: string, params?: TranslationParams, noWrap?: boolean, orEmpty?: boolean, defaultValue?: string): string;
    instant<T>(key: string, params?: TranslationParamsTags<T>, noWrap?: boolean, orEmpty?: boolean, defaultValue?: string): TranslationTags<T>;
    instant(props: InstantProps): string;
    instant<T>(props: InstantPropsTags<T>): TranslationTags<T>;
    /**
     * Get currently cached translations for all languages
     */
    getCachedTranslations(): Map<string, import("./types").Translations>;
    /**
     * Loads translations for given language or returns them from cache
     * @returns Loaded translations
     */
    loadTranslations(lang: string): Promise<import("./types").Translations>;
    stop: () => void;
    private emitLangChangeEvent;
}
