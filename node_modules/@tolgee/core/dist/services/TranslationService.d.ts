import { Translations } from '../types';
import { Properties } from '../Properties';
import { CoreService } from './CoreService';
import { ApiHttpService } from './ApiHttpService';
import { EventService } from './EventService';
import { ComplexEditKeyDto, CreateKeyDto, KeyWithDataModel, SetTranslationsResponseModel, SetTranslationsWithKeyDto, TranslationData } from '../types/DTOs';
interface TranslationInterface {
    text?: string;
}
interface Key {
    id?: number;
    name: string;
    translations: Record<string, TranslationInterface>;
}
export declare class TranslationService {
    private properties;
    private coreService;
    private apiHttpService;
    private eventService;
    private translationsCache;
    private fetchPromises;
    private fetchedDev;
    constructor(properties: Properties, coreService: CoreService, apiHttpService: ApiHttpService, eventService: EventService);
    private static translationByValue;
    initStatic(): void;
    getCachedTranslations(): Map<string, Translations>;
    updateTranslationInCache: (data: Key) => Promise<void>;
    loadTranslations(lang?: string): Promise<Translations>;
    getTranslation(key: string, lang?: string, defaultValue?: string): Promise<string>;
    updateKeyComplex(id: number, data: ComplexEditKeyDto): Promise<KeyWithDataModel>;
    createKey(data: CreateKeyDto): Promise<KeyWithDataModel>;
    setTranslations(translationData: SetTranslationsWithKeyDto): Promise<SetTranslationsResponseModel>;
    /**
     * Change translations of some keys to some value temporarily.
     * For screenshot taking with provided values, before actually saving
     * the values
     *
     * @return Returns callback changing affected translations back
     */
    changeTranslations({ key, translations, }: TranslationData): Promise<() => void>;
    getFromCacheOrFallback(key: string, lang?: string, defaultValue?: string): string;
    getTranslationsOfKey: (key: string, languages?: Set<string>) => Promise<readonly [{
        keyId: number;
        keyName: string;
        keyTags: {
            id: number;
            name: string;
        }[];
        screenshotCount: number;
        screenshots?: {
            id: number;
            filename: string;
            fileUrl: string;
            createdAt?: string;
        }[];
        translations: {
            [key: string]: {
                id: number;
                text?: string;
                state: "UNTRANSLATED" | "MACHINE_TRANSLATED" | "TRANSLATED" | "REVIEWED" | "NEEDS_REVIEW";
                commentCount: number;
                unresolvedCommentCount: number;
            };
        };
    }, string[]]>;
    private isFetchNeeded;
    private isLoaded;
    private fetchTranslations;
    private fetchTranslationsProduction;
    private fetchTranslationsDevelopment;
    private setEmptyLanguageData;
    private setLanguageData;
    private getFromCache;
}
export {};
