'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var PREFERRED_LANGUAGES_LOCAL_STORAGE_KEY = '__tolgee_preferredLanguages';
var CURRENT_LANGUAGE_LOCAL_STORAGE_KEY = '__tolgee_currentLanguage';
var Properties = /** @class */ (function () {
    function Properties() {
    }
    Object.defineProperty(Properties.prototype, "currentLanguage", {
        get: function () {
            var _a;
            if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.forceLanguage) {
                return this.config.forceLanguage;
            }
            if (!this._currentLanguage) {
                this._currentLanguage = this.getInitialLanguage();
            }
            return this._currentLanguage;
        },
        set: function (language) {
            var _a;
            if (!language) {
                throw new Error("Setting invalid language value ".concat(language));
            }
            this._currentLanguage = language;
            if (((_a = this.config) === null || _a === void 0 ? void 0 : _a.enableLanguageStore) &&
                typeof localStorage !== 'undefined') {
                localStorage.setItem(CURRENT_LANGUAGE_LOCAL_STORAGE_KEY, language);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Properties.prototype, "preferredLanguages", {
        get: function () {
            return new Set(JSON.parse(localStorage.getItem(PREFERRED_LANGUAGES_LOCAL_STORAGE_KEY)));
        },
        set: function (languages) {
            localStorage.setItem(PREFERRED_LANGUAGES_LOCAL_STORAGE_KEY, JSON.stringify(Array.from(languages)));
        },
        enumerable: false,
        configurable: true
    });
    Properties.prototype.getInitialLanguage = function () {
        if (this.config.enableLanguageStore) {
            var storedLanguage = this.getStoredLanguage();
            if (storedLanguage) {
                return storedLanguage;
            }
        }
        if (this.config.enableLanguageDetection) {
            var detectedLanguage = this.getLanguageByNavigator();
            if (detectedLanguage) {
                return detectedLanguage;
            }
        }
        return this.config.defaultLanguage;
    };
    Properties.prototype.getStoredLanguage = function () {
        if (typeof localStorage !== 'undefined') {
            var storedLanguage = localStorage.getItem(CURRENT_LANGUAGE_LOCAL_STORAGE_KEY);
            if (!this.config.availableLanguages) {
                return storedLanguage;
            }
            var isSavedLanguageAvailable = this.config.availableLanguages.indexOf(storedLanguage) > -1;
            if (isSavedLanguageAvailable) {
                return storedLanguage;
            }
        }
    };
    Properties.prototype.getLanguageByNavigator = function () {
        if (typeof window !== 'undefined' && this.config.availableLanguages) {
            var preferred_1 = window.navigator.language;
            var exactMatch = this.config.availableLanguages.find(function (l) { return l === preferred_1; });
            if (exactMatch) {
                return exactMatch;
            }
            var getTwoLetters_1 = function (fullTag) { return fullTag.replace(/^(.+?)(-.*)?$/, '$1'); };
            var preferredTwoLetter_1 = getTwoLetters_1(window.navigator.language);
            var twoLetterMatch = this.config.availableLanguages.find(function (l) { return getTwoLetters_1(l) === preferredTwoLetter_1; });
            if (twoLetterMatch) {
                return twoLetterMatch;
            }
        }
    };
    return Properties;
}());

var Subscription = /** @class */ (function () {
    function Subscription(onUnsubscribe) {
        this.onUnsubscribe = onUnsubscribe;
    }
    Subscription.prototype.unsubscribe = function () {
        this.onUnsubscribe();
    };
    return Subscription;
}());

var EventEmitterImpl = /** @class */ (function () {
    function EventEmitterImpl() {
        this.idCounter = 0;
        this._subscriptions = new Map();
    }
    Object.defineProperty(EventEmitterImpl.prototype, "subscriptions", {
        get: function () {
            return this._subscriptions;
        },
        enumerable: false,
        configurable: true
    });
    EventEmitterImpl.prototype.emit = function (data) {
        var e_1, _a;
        var promiseReturns = [];
        try {
            for (var _b = __values(this.subscriptions.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var callback = _c.value;
                var returned = callback(data);
                if (typeof (returned === null || returned === void 0 ? void 0 : returned['then']) === 'function') {
                    promiseReturns.push(returned);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (promiseReturns.length === 0) {
            return;
        }
        return new Promise(function (resolve) {
            return Promise.all(promiseReturns).then(function () { return resolve(); });
        });
    };
    EventEmitterImpl.prototype.subscribe = function (callback) {
        var _this = this;
        var newId = this.idCounter++;
        var subscription = new Subscription(function () { return _this.unsubscribe(newId); });
        this.subscriptions.set(newId, callback);
        return subscription;
    };
    EventEmitterImpl.prototype.unsubscribe = function (id) {
        var wasPresent = this._subscriptions.delete(id);
        if (!wasPresent) {
            // eslint-disable-next-line no-console
            console.warn('Event to unsubscribe was not found');
        }
    };
    return EventEmitterImpl;
}());

var EventService = /** @class */ (function () {
    function EventService() {
        this.TRANSLATION_CHANGED = new EventEmitterImpl();
        this.LANGUAGE_CHANGED = new EventEmitterImpl();
        this.LANGUAGE_LOADED = new EventEmitterImpl();
        this.ELEMENT_REGISTERED = new EventEmitterImpl();
    }
    return EventService;
}());

var ApiHttpError = /** @class */ (function (_super) {
    __extends(ApiHttpError, _super);
    function ApiHttpError(response, code) {
        var _this = _super.call(this, 'Api http error') || this;
        _this.response = response;
        _this.code = code;
        // Set the prototype explicitly.
        Object.setPrototypeOf(_this, ApiHttpError.prototype);
        return _this;
    }
    return ApiHttpError;
}(Error));

var ApiHttpService = /** @class */ (function () {
    function ApiHttpService(properties) {
        this.properties = properties;
    }
    ApiHttpService.handleErrors = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var error, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(response.status >= 400)) return [3 /*break*/, 5];
                        error = new ApiHttpError(response);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, response.json()];
                    case 2:
                        data = _a.sent();
                        error.code = data.code;
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        // eslint-disable-next-line no-console
                        console.warn('Tolgee server responded with invalid status code.');
                        return [3 /*break*/, 4];
                    case 4: throw error;
                    case 5: return [2 /*return*/, response];
                }
            });
        });
    };
    ApiHttpService.prototype.fetch = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _a, url, rest;
            return __generator(this, function (_b) {
                if (typeof args[0] === 'object') {
                    return [2 /*return*/, fetch(__assign(__assign({}, args[0]), { url: this.getUrl(args[0].url) })).then(function (r) { return ApiHttpService.handleErrors(r); })];
                }
                _a = __read(args), url = _a[0], rest = _a.slice(1);
                return [2 /*return*/, fetch.apply(void 0, __spreadArray([this.getUrl(url)], __read(rest), false)).then(function (r) {
                        return ApiHttpService.handleErrors(r);
                    })];
            });
        });
    };
    ApiHttpService.prototype.fetchJson = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetch.apply(this, __spreadArray([], __read(args), false)).then(function (res) {
                        return res.json();
                    })];
            });
        });
    };
    ApiHttpService.prototype.post = function (url, body, init) {
        if (init === void 0) { init = {}; }
        var rest = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            rest[_i - 3] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetch.apply(this, __spreadArray([url, __assign({ body: JSON.stringify(body), method: 'POST', headers: {
                                'Content-Type': 'application/json',
                            } }, init)], __read(rest), false))];
            });
        });
    };
    ApiHttpService.prototype.postJson = function (url, body, init) {
        if (init === void 0) { init = {}; }
        var rest = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            rest[_i - 3] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post.apply(this, __spreadArray([url, body, init], __read(rest), false)).then(function (res) { return res.json(); })];
            });
        });
    };
    ApiHttpService.prototype.getUrl = function (path) {
        var querySeparator = path.indexOf('?') < 0 ? '?' : '&';
        return "".concat(this.properties.config.apiUrl, "/").concat(path).concat(querySeparator, "ak=").concat(this.properties.config.apiKey);
    };
    return ApiHttpService;
}());

var TranslationData = /** @class */ (function () {
    function TranslationData(key, translations, id) {
        this.key = key;
        this.translations = translations;
        this.id = id;
    }
    return TranslationData;
}());

var TranslationService = /** @class */ (function () {
    function TranslationService(properties, coreService, apiHttpService, eventService) {
        var _this = this;
        this.properties = properties;
        this.coreService = coreService;
        this.apiHttpService = apiHttpService;
        this.eventService = eventService;
        this.translationsCache = new Map();
        this.fetchPromises = {};
        // we need to distinguish which languages are in cache initially
        // because we need to refetch them in dev mode
        this.fetchedDev = {};
        this.updateTranslationInCache = function (data) { return __awaiter(_this, void 0, void 0, function () {
            var result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = {};
                        Object.entries(data.translations).forEach(function (_a) {
                            var _b = __read(_a, 2), lang = _b[0], translation = _b[1];
                            var cachedData = _this.translationsCache.get(lang);
                            if (cachedData) {
                                cachedData[data.name] = translation.text;
                            }
                            result[lang] = translation.text;
                        });
                        return [4 /*yield*/, this.eventService.TRANSLATION_CHANGED.emit(new TranslationData(data.name, result, data.id))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.getTranslationsOfKey = function (key, languages) {
            if (languages === void 0) { languages = new Set([_this.properties.currentLanguage]); }
            return __awaiter(_this, void 0, void 0, function () {
                var languagesArray, languagesQuery, data, translationData_1, firstItem, langs, e_1, _a;
                var _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            this.coreService.checkScope('translations.view');
                            _e.label = 1;
                        case 1:
                            _e.trys.push([1, 3, , 7]);
                            languagesArray = __spreadArray([], __read(languages), false);
                            languagesQuery = languagesArray
                                .map(function (l) { return "languages=".concat(l); })
                                .join('&');
                            return [4 /*yield*/, this.apiHttpService.fetchJson("v2/projects/translations?".concat(languagesQuery, "&filterKeyName=").concat(encodeURIComponent(key)))];
                        case 2:
                            data = _e.sent();
                            translationData_1 = languagesArray.reduce(function (acc, curr) {
                                var _a;
                                return (__assign(__assign({}, acc), (_a = {}, _a[curr] = '', _a)));
                            }, {});
                            firstItem = (_c = (_b = data._embedded) === null || _b === void 0 ? void 0 : _b.keys) === null || _c === void 0 ? void 0 : _c[0];
                            if (firstItem === null || firstItem === void 0 ? void 0 : firstItem.translations) {
                                Object.entries(firstItem.translations).forEach(function (_a) {
                                    var _b = __read(_a, 2), language = _b[0], translation = _b[1];
                                    return (translationData_1[language] = translation.text);
                                });
                            }
                            langs = (_d = data.selectedLanguages) === null || _d === void 0 ? void 0 : _d.map(function (l) { return l.tag; });
                            return [2 /*return*/, [firstItem, langs]];
                        case 3:
                            e_1 = _e.sent();
                            if (!(e_1 instanceof ApiHttpError &&
                                e_1.response.status === 404 &&
                                e_1.code === 'language_not_found')) return [3 /*break*/, 5];
                            // only possible reason for this error is, that languages definition
                            // is changed, but the old value is stored in preferred languages
                            _a = this.properties;
                            return [4 /*yield*/, this.coreService.getLanguages()];
                        case 4:
                            // only possible reason for this error is, that languages definition
                            // is changed, but the old value is stored in preferred languages
                            _a.preferredLanguages =
                                _e.sent();
                            // eslint-disable-next-line no-console
                            console.error('Requested language not found, refreshing the page!');
                            location.reload();
                            return [3 /*break*/, 6];
                        case 5: throw e_1;
                        case 6: return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
    }
    TranslationService.translationByValue = function (message, defaultValue) {
        if (message) {
            return message;
        }
        if (defaultValue) {
            return defaultValue;
        }
        return undefined;
    };
    TranslationService.prototype.initStatic = function () {
        var _this = this;
        var _a;
        if (typeof ((_a = this.properties.config) === null || _a === void 0 ? void 0 : _a.staticData) === 'object') {
            Object.entries(this.properties.config.staticData).forEach(function (_a) {
                var _b = __read(_a, 2), language = _b[0], data = _b[1];
                //if not provider or promise then it is raw data
                if (typeof data !== 'function') {
                    _this.setLanguageData(language, data);
                }
            });
        }
    };
    TranslationService.prototype.getCachedTranslations = function () {
        return this.translationsCache;
    };
    TranslationService.prototype.loadTranslations = function (lang) {
        if (lang === void 0) { lang = this.properties.currentLanguage; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isFetchNeeded(lang)) return [3 /*break*/, 2];
                        if (!(this.fetchPromises[lang] instanceof Promise)) {
                            this.fetchPromises[lang] = this.fetchTranslations(lang);
                        }
                        return [4 /*yield*/, this.fetchPromises[lang]];
                    case 1:
                        _a.sent();
                        this.eventService.LANGUAGE_LOADED.emit(lang);
                        _a.label = 2;
                    case 2:
                        this.fetchPromises[lang] = undefined;
                        return [2 /*return*/, this.translationsCache.get(lang)];
                }
            });
        });
    };
    TranslationService.prototype.getTranslation = function (key, lang, defaultValue) {
        if (lang === void 0) { lang = this.properties.currentLanguage; }
        return __awaiter(this, void 0, void 0, function () {
            var message, fallbackLang;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isFetchNeeded(lang)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadTranslations(lang)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        message = this.getFromCache(key, lang);
                        if (!!message) return [3 /*break*/, 5];
                        fallbackLang = this.properties.config.fallbackLanguage;
                        if (!this.isFetchNeeded(fallbackLang)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.loadTranslations(this.properties.config.fallbackLanguage)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        message = this.getFromCache(key, this.properties.config.fallbackLanguage);
                        _a.label = 5;
                    case 5: return [2 /*return*/, TranslationService.translationByValue(message, defaultValue)];
                }
            });
        });
    };
    TranslationService.prototype.updateKeyComplex = function (id, data) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.coreService.checkScope('translations.edit');
                        return [4 /*yield*/, this.apiHttpService.postJson("v2/projects/keys/".concat(id, "/complex-update"), __assign(__assign({}, data), { screenshotUploadedImageIds: ((_a = data.screenshotUploadedImageIds) === null || _a === void 0 ? void 0 : _a.length)
                                    ? data.screenshotUploadedImageIds
                                    : undefined, screenshotIdsToDelete: ((_b = data.screenshotIdsToDelete) === null || _b === void 0 ? void 0 : _b.length)
                                    ? data.screenshotIdsToDelete
                                    : undefined }), { method: 'put' })];
                    case 1:
                        result = (_c.sent());
                        return [4 /*yield*/, this.updateTranslationInCache(result)];
                    case 2:
                        _c.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    TranslationService.prototype.createKey = function (data) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.coreService.checkScope('keys.edit');
                        return [4 /*yield*/, this.apiHttpService.postJson("v2/projects/keys/create", __assign(__assign({}, data), { screenshotUploadedImageIds: ((_a = data.screenshotUploadedImageIds) === null || _a === void 0 ? void 0 : _a.length)
                                    ? data.screenshotUploadedImageIds
                                    : undefined }))];
                    case 1:
                        result = (_b.sent());
                        return [4 /*yield*/, this.updateTranslationInCache(result)];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    TranslationService.prototype.setTranslations = function (translationData) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.coreService.checkScope('translations.edit');
                        return [4 /*yield*/, this.apiHttpService.postJson('v2/projects/translations', translationData)];
                    case 1:
                        result = (_a.sent());
                        return [4 /*yield*/, this.updateTranslationInCache({
                                id: result.keyId,
                                name: result.keyName,
                                translations: result.translations,
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Change translations of some keys to some value temporarily.
     * For screenshot taking with provided values, before actually saving
     * the values
     *
     * @return Returns callback changing affected translations back
     */
    TranslationService.prototype.changeTranslations = function (_a) {
        var key = _a.key, translations = _a.translations;
        return __awaiter(this, void 0, void 0, function () {
            var old;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        old = {};
                        Object.entries(translations).forEach(function (_a) {
                            var _b = __read(_a, 2), language = _b[0], value = _b[1];
                            var data = _this.translationsCache.get(language);
                            if (data) {
                                old[language] = data[key];
                                data[key] = value;
                            }
                        });
                        return [4 /*yield*/, this.eventService.TRANSLATION_CHANGED.emit({
                                key: key,
                                translations: translations,
                            })];
                    case 1:
                        _b.sent();
                        // callback to revert the operation
                        return [2 /*return*/, function () { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            Object.entries(old).forEach(function (_a) {
                                                var _b = __read(_a, 2), language = _b[0], value = _b[1];
                                                var data = _this.translationsCache.get(language);
                                                if (data) {
                                                    data[key] = value;
                                                }
                                            });
                                            return [4 /*yield*/, this.eventService
                                                    .TRANSLATION_CHANGED.emit({
                                                    key: key,
                                                    translations: old,
                                                })];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }];
                }
            });
        });
    };
    TranslationService.prototype.getFromCacheOrFallback = function (key, lang, defaultValue) {
        if (lang === void 0) { lang = this.properties.currentLanguage; }
        var fallbackLang = this.properties.config.fallbackLanguage;
        var message = this.getFromCache(key, lang) || this.getFromCache(key, fallbackLang);
        if (!message && (!this.isLoaded(lang) || !this.isLoaded(fallbackLang))) {
            return undefined;
        }
        return TranslationService.translationByValue(message, defaultValue);
    };
    TranslationService.prototype.isFetchNeeded = function (lang) {
        var isDevMode = this.properties.mode === 'development';
        var dataPresent = this.translationsCache.get(lang) !== undefined;
        var devFetched = Boolean(this.fetchedDev[lang]);
        return (isDevMode && !devFetched) || !dataPresent;
    };
    TranslationService.prototype.isLoaded = function (lang) {
        return this.translationsCache.get(lang) !== undefined;
    };
    TranslationService.prototype.fetchTranslations = function (lang) {
        return __awaiter(this, void 0, void 0, function () {
            var isDevMode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isDevMode = this.properties.mode === 'development';
                        if (!isDevMode) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fetchTranslationsDevelopment(lang)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, this.fetchTranslationsProduction(lang)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TranslationService.prototype.fetchTranslationsProduction = function (language) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var langStaticData, data, url, result, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        langStaticData = (_b = (_a = this.properties.config) === null || _a === void 0 ? void 0 : _a.staticData) === null || _b === void 0 ? void 0 : _b[language];
                        if (!(typeof langStaticData === 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, langStaticData()];
                    case 1:
                        data = _c.sent();
                        this.setLanguageData(language, data);
                        return [2 /*return*/];
                    case 2:
                        if (langStaticData !== undefined) {
                            this.setLanguageData(language, langStaticData);
                            return [2 /*return*/];
                        }
                        _c.label = 3;
                    case 3:
                        url = "".concat(this.properties.config.filesUrlPrefix || '/').concat(language, ".json");
                        _c.label = 4;
                    case 4:
                        _c.trys.push([4, 10, , 11]);
                        return [4 /*yield*/, fetch(url)];
                    case 5:
                        result = _c.sent();
                        if (result.status >= 400) {
                            //on error set language data as empty object to not break the flow
                            // eslint-disable-next-line no-console
                            console.error('Server responded with error status while loading localization data.');
                            this.setLanguageData(language, {});
                            return [2 /*return*/];
                        }
                        _c.label = 6;
                    case 6:
                        _c.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, result.json()];
                    case 7:
                        data = _c.sent();
                        this.setLanguageData(language, data);
                        return [3 /*break*/, 9];
                    case 8:
                        _c.sent();
                        // eslint-disable-next-line no-console
                        console.error("Error parsing json retrieved from ".concat(url, "."));
                        this.setEmptyLanguageData(language);
                        return [3 /*break*/, 9];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        _c.sent();
                        // eslint-disable-next-line no-console
                        console.error("Error fetching localization data from ".concat(url, "."));
                        this.setEmptyLanguageData(language);
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    TranslationService.prototype.fetchTranslationsDevelopment = function (language) {
        return __awaiter(this, void 0, void 0, function () {
            var data, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.coreService.loadApiKeyDetails()];
                    case 1:
                        _a.sent();
                        this.coreService.checkScope('translations.view');
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.apiHttpService.fetchJson("v2/projects/translations/".concat(language))];
                    case 3:
                        data = _a.sent();
                        this.fetchedDev[language] = true;
                        this.setLanguageData(language, data[language] || {});
                        return [3 /*break*/, 5];
                    case 4:
                        e_4 = _a.sent();
                        // eslint-disable-next-line no-console
                        console.error('Error while fetching localization data from API.', e_4);
                        this.setEmptyLanguageData(language);
                        return [2 /*return*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    TranslationService.prototype.setEmptyLanguageData = function (language) {
        this.translationsCache.set(language, {});
    };
    TranslationService.prototype.setLanguageData = function (language, data) {
        // recursively walk the tree and make it flat, when tree data are provided
        var makeFlat = function (data) {
            var result = {};
            Object.entries(data).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                // ignore falsy values
                if (!value) {
                    return;
                }
                if (typeof value === 'object') {
                    Object.entries(makeFlat(value)).forEach(function (_a) {
                        var _b = __read(_a, 2), flatKey = _b[0], flatValue = _b[1];
                        result[key + '.' + flatKey] = flatValue;
                    });
                    return;
                }
                result[key] = value;
            });
            return result;
        };
        this.translationsCache.set(language, makeFlat(data));
    };
    TranslationService.prototype.getFromCache = function (key, lang) {
        if (lang === void 0) { lang = this.properties.currentLanguage; }
        var root = this.translationsCache.get(lang);
        //if lang is not downloaded or does not exist at all
        if (root === undefined) {
            return undefined;
        }
        return root[key];
    };
    return TranslationService;
}());

var TextService = /** @class */ (function () {
    function TextService(properties, translationService, moduleService) {
        var _this = this;
        this.properties = properties;
        this.translationService = translationService;
        this.moduleService = moduleService;
        this.format = function (translation, params, lang) {
            try {
                // try to format the text
                var result = translation;
                if (_this.moduleService.formatter) {
                    result = _this.moduleService.formatter.format({
                        translation: result,
                        params: params,
                        language: lang || _this.properties.currentLanguage,
                    });
                }
                return result;
            }
            catch (e) {
                // if string cannot be formatted, throw error
                // eslint-disable-next-line no-console
                console.error(e);
            }
        };
    }
    TextService.prototype.translate = function (key, params, lang, orEmpty, defaultValue) {
        if (lang === void 0) { lang = this.properties.currentLanguage; }
        return __awaiter(this, void 0, void 0, function () {
            var translation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.translationService.getTranslation(key, lang, defaultValue)];
                    case 1:
                        translation = _a.sent();
                        return [2 /*return*/, this.formatTranslation(key, translation, params, lang, orEmpty)];
                }
            });
        });
    };
    TextService.prototype.instant = function (key, params, lang, orEmpty, defaultValue) {
        if (lang === void 0) { lang = this.properties.currentLanguage; }
        var translation = this.translationService.getFromCacheOrFallback(key, lang, defaultValue);
        return this.formatTranslation(key, translation, params, lang, orEmpty);
    };
    TextService.prototype.formatTranslation = function (key, translation, params, lang, orEmpty) {
        if (translation !== undefined) {
            return this.format(translation, params, lang);
        }
        if (!orEmpty) {
            return key;
        }
        return '';
    };
    return TextService;
}());

exports.ModifierKey = void 0;
(function (ModifierKey) {
    ModifierKey[ModifierKey["Alt"] = 0] = "Alt";
    ModifierKey[ModifierKey["Control"] = 1] = "Control";
    ModifierKey[ModifierKey["Shift"] = 2] = "Shift";
    ModifierKey[ModifierKey["Meta"] = 3] = "Meta";
})(exports.ModifierKey || (exports.ModifierKey = {}));

var RESTRICTED_ASCENDANT_ATTRIBUTE = 'data-tolgee-restricted';
var TOLGEE_ATTRIBUTE_NAME = '_tolgee';
var TOLGEE_TARGET_ATTRIBUTE = '_tolgee-target';
var TOLGEE_WRAPPED_ONLY_DATA_ATTRIBUTE = 'data-tolgee-key-only';
var TOLGEE_HIGHLIGHTER_CLASS = '_tolgee-highlighter';
// needs to be same as in @tolgee/ui package
var DEVTOOLS_ID = '__tolgee_dev_tools';

var eCapture = {
    capture: true,
};
var ePassive = {
    capture: true,
    passive: true,
};
var MouseEventHandler = /** @class */ (function () {
    function MouseEventHandler(dependencies) {
        var _this = this;
        this.dependencies = dependencies;
        this.keysDown = new Set();
        this.mouseOnChanged = new EventEmitterImpl();
        this.keysChanged = new EventEmitterImpl();
        this.highlight = function (el) {
            if (_this.highlighted !== el) {
                _this.unhighlight();
                if (el) {
                    el._tolgee.preventClean = true;
                    el._tolgee.highlight();
                    _this.highlighted = el;
                    _this.mouseOnChanged.emit(el);
                }
            }
        };
        this.unhighlight = function () {
            if (_this.highlighted) {
                _this.highlighted._tolgee.preventClean = false;
                _this.highlighted._tolgee.unhighlight();
                _this.highlighted = undefined;
                _this.mouseOnChanged.emit(_this.highlighted);
            }
        };
        this.blockEvents = function (e) {
            if (_this.areKeysDown() && !_this.isInUiDialog(e.target)) {
                e.stopPropagation();
                e.preventDefault();
            }
        };
        this.onMouseMove = function (e) {
            _this.updateCursorPosition({ x: e.clientX, y: e.clientY });
        };
        this.onBlur = function () {
            _this.keysDown = new Set();
            _this.keysChanged.emit(_this.areKeysDown());
            _this.updateHighlight();
        };
        this.onKeyDown = function (e) {
            var modifierKey = exports.ModifierKey[e.key];
            if (modifierKey !== undefined) {
                _this.keysDown.add(modifierKey);
                _this.keysChanged.emit(_this.areKeysDown());
            }
            _this.updateHighlight();
        };
        this.onKeyUp = function (e) {
            _this.keysDown.delete(exports.ModifierKey[e.key]);
            _this.keysChanged.emit(_this.areKeysDown());
            _this.updateHighlight();
        };
        this.onScroll = function () {
            var _a;
            (_a = _this.highlighted) === null || _a === void 0 ? void 0 : _a._tolgee.highlight();
        };
        this.onClick = function (e) {
            _this.blockEvents(e);
            if (_this.areKeysDown()) {
                var element = _this.getClosestTolgeeElement(e.target);
                if (element && element === _this.highlighted) {
                    _this.dependencies.translationHighlighter.translationEdit(e, element);
                    _this.unhighlight();
                }
            }
        };
    }
    MouseEventHandler.prototype.run = function () {
        if (typeof window !== 'undefined') {
            this.initEventListeners();
        }
    };
    MouseEventHandler.prototype.stop = function () {
        if (typeof window !== 'undefined') {
            this.removeEventListeners();
        }
    };
    MouseEventHandler.prototype.updateHighlight = function () {
        var position = this.cursorPosition;
        var newHighlighted;
        if (position && this.areKeysDown()) {
            newHighlighted = this.getClosestTolgeeElement(document.elementFromPoint(position.x, position.y));
        }
        this.highlight(newHighlighted);
    };
    MouseEventHandler.prototype.updateCursorPosition = function (position) {
        this.cursorPosition = position;
        this.updateHighlight();
    };
    MouseEventHandler.prototype.initEventListeners = function () {
        window.addEventListener('blur', this.onBlur, eCapture);
        window.addEventListener('keydown', this.onKeyDown, eCapture);
        window.addEventListener('keyup', this.onKeyUp, eCapture);
        window.addEventListener('mousemove', this.onMouseMove, ePassive);
        window.addEventListener('scroll', this.onScroll, ePassive);
        window.addEventListener('click', this.onClick, eCapture);
        window.addEventListener('mouseenter', this.blockEvents, eCapture);
        window.addEventListener('mouseover', this.blockEvents, eCapture);
        window.addEventListener('mouseout', this.blockEvents, eCapture);
        window.addEventListener('mouseleave', this.blockEvents, eCapture);
        window.addEventListener('mousedown', this.blockEvents, eCapture);
        window.addEventListener('mouseup', this.blockEvents, eCapture);
    };
    MouseEventHandler.prototype.removeEventListeners = function () {
        window.removeEventListener('blur', this.onBlur, eCapture);
        window.removeEventListener('keydown', this.onKeyDown, eCapture);
        window.removeEventListener('keyup', this.onKeyUp, eCapture);
        window.removeEventListener('mousemove', this.onMouseMove, ePassive);
        window.removeEventListener('scroll', this.onScroll, ePassive);
        window.removeEventListener('click', this.onClick, eCapture);
        window.removeEventListener('mouseenter', this.blockEvents, eCapture);
        window.removeEventListener('mouseover', this.blockEvents, eCapture);
        window.removeEventListener('mouseout', this.blockEvents, eCapture);
        window.removeEventListener('mouseleave', this.blockEvents, eCapture);
        window.removeEventListener('mousedown', this.blockEvents, eCapture);
        window.removeEventListener('mouseup', this.blockEvents, eCapture);
    };
    MouseEventHandler.prototype.isInUiDialog = function (element) {
        return Boolean(this.findAncestor(element, function (el) { return el.id === DEVTOOLS_ID; }));
    };
    MouseEventHandler.prototype.getClosestTolgeeElement = function (element) {
        return this.findAncestor(element, function (el) { return el === null || el === void 0 ? void 0 : el._tolgee; });
    };
    MouseEventHandler.prototype.findAncestor = function (element, func) {
        if (func(element)) {
            return element;
        }
        if (element === null || element === void 0 ? void 0 : element.parentElement) {
            return this.findAncestor(element.parentElement, func);
        }
        return undefined;
    };
    MouseEventHandler.prototype.areKeysDown = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.dependencies.properties.config.highlightKeys), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (!this.keysDown.has(key)) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
    };
    return MouseEventHandler;
}());

var TranslationHighlighter = /** @class */ (function () {
    function TranslationHighlighter(dependencies) {
        var _this = this;
        this.dependencies = dependencies;
        this.translationEdit = function (e, element) { return __awaiter(_this, void 0, void 0, function () {
            var renderer, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRenderer()];
                    case 1:
                        renderer = _a.sent();
                        if (!(typeof renderer === 'object')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getKeyAndDefault(e, element)];
                    case 2:
                        key = _a.sent();
                        if (key) {
                            renderer.renderViewer(key.key, key.defaultValue);
                            return [2 /*return*/];
                        }
                        return [2 /*return*/];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
    }
    TranslationHighlighter.getKeyOptions = function (node) {
        var nodes = Array.from(node._tolgee.nodes);
        return nodes.reduce(function (acc, curr) { return __spreadArray(__spreadArray([], __read(acc), false), __read(curr._tolgee.keys.map(function (k) { return ({
            key: k.key,
            defaultValue: k.defaultValue,
        }); })), false); }, []);
    };
    TranslationHighlighter.prototype.listen = function (element) {
        this.dependencies.highlightFunctionInitializer.initFunctions(element);
    };
    TranslationHighlighter.prototype.getRenderer = function () {
        return __awaiter(this, void 0, void 0, function () {
            var possibleProviders, possibleProviders_1, possibleProviders_1_1, possiblePromise, possibleObject, _a, possibleProvider, e_1_1;
            var e_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(this._renderer === undefined)) return [3 /*break*/, 11];
                        possibleProviders = [
                            this.dependencies.properties.config.ui,
                            window['@tolgee/ui'],
                        ];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 8, 9, 10]);
                        possibleProviders_1 = __values(possibleProviders), possibleProviders_1_1 = possibleProviders_1.next();
                        _c.label = 2;
                    case 2:
                        if (!!possibleProviders_1_1.done) return [3 /*break*/, 7];
                        possiblePromise = possibleProviders_1_1.value;
                        if (!(possiblePromise instanceof Promise)) return [3 /*break*/, 4];
                        return [4 /*yield*/, possiblePromise];
                    case 3:
                        _a = _c.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _a = possiblePromise;
                        _c.label = 5;
                    case 5:
                        possibleObject = _a;
                        possibleProvider = typeof possibleObject === 'object'
                            ? possibleObject === null || possibleObject === void 0 ? void 0 : possibleObject.UI
                            : possibleObject;
                        if (typeof possibleProvider === 'function') {
                            this._renderer = new possibleProvider(this.dependencies);
                            return [3 /*break*/, 7];
                        }
                        _c.label = 6;
                    case 6:
                        possibleProviders_1_1 = possibleProviders_1.next();
                        return [3 /*break*/, 2];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (possibleProviders_1_1 && !possibleProviders_1_1.done && (_b = possibleProviders_1.return)) _b.call(possibleProviders_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        if (this._renderer === undefined) {
                            // eslint-disable-next-line no-console
                            console.warn('Tolgee UI is not provided. To translate interactively provide tolgee ui constructor to "ui" configuration property. ' +
                                'To disable highlighting use production mode.');
                        }
                        _c.label = 11;
                    case 11: return [2 /*return*/, this._renderer];
                }
            });
        });
    };
    TranslationHighlighter.prototype.getKeyAndDefault = function (mouseEvent, element) {
        return __awaiter(this, void 0, void 0, function () {
            var keysWithDefaults, keySet, renderer, selectedKey_1, found;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (element._tolgee.wrappedWithElementOnlyKey) {
                            return [2 /*return*/, {
                                    key: element._tolgee.wrappedWithElementOnlyKey,
                                    defaultValue: element._tolgee.wrappedWithElementOnlyDefaultHtml,
                                }];
                        }
                        keysWithDefaults = TranslationHighlighter.getKeyOptions(element);
                        keySet = new Set(keysWithDefaults.map(function (keyWithDefault) { return keyWithDefault.key; }));
                        if (!(keySet.size > 1)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getRenderer()];
                    case 1:
                        renderer = _a.sent();
                        return [4 /*yield*/, renderer.getKey({
                                keys: keySet,
                                openEvent: mouseEvent,
                            })];
                    case 2:
                        selectedKey_1 = _a.sent();
                        found = keysWithDefaults.find(function (kwd) { return kwd.key === selectedKey_1; });
                        if (found) {
                            return [2 /*return*/, found];
                        }
                        _a.label = 3;
                    case 3:
                        if (keySet.size === 1) {
                            return [2 /*return*/, keysWithDefaults[0]];
                        }
                        // eslint-disable-next-line no-console
                        console.error('No key to translate. This seems like a bug in tolgee.');
                        return [2 /*return*/];
                }
            });
        });
    };
    return TranslationHighlighter;
}());

var NodeHelper = /** @class */ (function () {
    function NodeHelper() {
    }
    NodeHelper.evaluate = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return Array.from(this.evaluateGenerator.apply(this, __spreadArray([], __read(args), false)));
    };
    NodeHelper.evaluateToSingle = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var arr = this.evaluate.apply(this, __spreadArray([], __read(args), false));
        if (arr.length === 1) {
            return arr[0];
        }
        if (arr.length < 1) {
            throw new Error('No element found');
        }
        throw new Error('Multiple elements found');
    };
    NodeHelper.closestElement = function (node) {
        if (node instanceof Text) {
            return node.parentElement;
        }
        return node;
    };
    NodeHelper.getParentElement = function (node) {
        if (node.parentElement) {
            return node.parentElement;
        }
        if (node.ownerElement) {
            return node.ownerElement;
        }
    };
    NodeHelper.isElementTargetElement = function (element) {
        return element.hasAttribute(TOLGEE_TARGET_ATTRIBUTE);
    };
    NodeHelper.markElementAsTargetElement = function (element) {
        element.setAttribute(TOLGEE_TARGET_ATTRIBUTE, '');
    };
    NodeHelper.unmarkElementAsTargetElement = function (element) {
        element.removeAttribute(TOLGEE_TARGET_ATTRIBUTE);
    };
    NodeHelper.nodeContains = function (descendant, node) {
        if (descendant.contains(node)) {
            return true;
        }
        if (node instanceof Attr) {
            var ownerContainsAttr = node.ownerElement &&
                Object.values(node.ownerElement.attributes).indexOf(node) > -1;
            if (descendant.contains(node.ownerElement) && ownerContainsAttr) {
                return true;
            }
        }
        return false;
    };
    NodeHelper.evaluateGenerator = function (expression, targetNode) {
        var node, evaluated;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    evaluated = document.evaluate(expression, targetNode, undefined, XPathResult.ANY_TYPE);
                    _a.label = 1;
                case 1:
                    if (!((node = evaluated.iterateNext()) !== null)) return [3 /*break*/, 3];
                    return [4 /*yield*/, node];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    NodeHelper.getNodeText = function (node) {
        return node.textContent;
    };
    NodeHelper.setNodeText = function (node, text) {
        node.textContent = text;
    };
    return NodeHelper;
}());

var ElementRegistrar = /** @class */ (function () {
    function ElementRegistrar(properties, translationHighlighter, eventService) {
        this.properties = properties;
        this.translationHighlighter = translationHighlighter;
        this.eventService = eventService;
        this.registeredElements = new Set();
    }
    ElementRegistrar.prototype.register = function (element) {
        //ignore element with no active nodes
        if (this.getActiveNodes(element).next().value === undefined &&
            !element._tolgee.wrappedWithElementOnlyKey) {
            return;
        }
        if (this.properties.mode === 'development' &&
            !this.registeredElements.has(element)) {
            this.translationHighlighter.listen(element);
        }
        this.registeredElements.add(element);
        this.eventService.ELEMENT_REGISTERED.emit(element);
    };
    ElementRegistrar.prototype.refreshAll = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.registeredElements), _c = _b.next(); !_c.done; _c = _b.next()) {
                var element = _c.value;
                if (!element._tolgee.preventClean) {
                    this.cleanElementInactiveNodes(element);
                    if (element._tolgee.nodes.size === 0 &&
                        !element._tolgee.wrappedWithElementOnlyKey) {
                        this.cleanElement(element);
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ElementRegistrar.prototype.cleanAll = function () {
        var e_2, _a;
        try {
            for (var _b = __values(this.registeredElements), _c = _b.next(); !_c.done; _c = _b.next()) {
                var registeredElement = _c.value;
                this.cleanElement(registeredElement);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    ElementRegistrar.prototype.findAllByKey = function (key) {
        var e_3, _a, e_4, _b;
        var result = [];
        try {
            for (var _c = __values(this.registeredElements), _d = _c.next(); !_d.done; _d = _c.next()) {
                var registeredElement = _d.value;
                if (registeredElement._tolgee.wrappedWithElementOnlyKey === key) {
                    result.push(registeredElement);
                    continue;
                }
                try {
                    for (var _e = (e_4 = void 0, __values(registeredElement._tolgee.nodes)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var node = _f.value;
                        if (node._tolgee.keys.findIndex(function (keyWithParams) { return keyWithParams.key === key; }) > -1) {
                            result.push(registeredElement);
                            break;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return result;
    };
    ElementRegistrar.prototype.cleanElementInactiveNodes = function (element) {
        if (this.isElementActive(element)) {
            element._tolgee.nodes = new Set(this.getActiveNodes(element));
            return;
        }
    };
    ElementRegistrar.prototype.cleanElement = function (element) {
        if (!element._tolgee.preventClean) {
            if (element._tolgee.highlightEl) {
                element._tolgee.unhighlight();
            }
            element.removeAttribute(TOLGEE_ATTRIBUTE_NAME);
            delete element._tolgee;
            this.registeredElements.delete(element);
        }
    };
    ElementRegistrar.prototype.getActiveNodes = function (element) {
        var _a, _b, node, e_5_1;
        var e_5, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = __values(element._tolgee.nodes), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    node = _b.value;
                    if (!NodeHelper.nodeContains(this.properties.config.targetElement, node)) return [3 /*break*/, 3];
                    return [4 /*yield*/, node];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_5_1 = _d.sent();
                    e_5 = { error: e_5_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_5) throw e_5.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    ElementRegistrar.prototype.isElementActive = function (element) {
        return this.properties.config.targetElement.contains(element);
    };
    return ElementRegistrar;
}());

var Observer = /** @class */ (function () {
    function Observer(properties, textWrapper, nodeRegistrar) {
        this.properties = properties;
        this.textWrapper = textWrapper;
        this.nodeRegistrar = nodeRegistrar;
        this._observer = undefined;
        this._observing = false;
    }
    Object.defineProperty(Observer.prototype, "observer", {
        get: function () {
            var _this = this;
            if (!this._observer && typeof window !== 'undefined') {
                this._observer = new MutationObserver(function (mutationsList) { return __awaiter(_this, void 0, void 0, function () {
                    var mutationsList_1, mutationsList_1_1, mutation, e_1_1;
                    var e_1, _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 9, 10, 11]);
                                mutationsList_1 = __values(mutationsList), mutationsList_1_1 = mutationsList_1.next();
                                _b.label = 1;
                            case 1:
                                if (!!mutationsList_1_1.done) return [3 /*break*/, 8];
                                mutation = mutationsList_1_1.value;
                                if (!this._observing) {
                                    // make sure we don't touch the DOM after disconnect is called
                                    return [2 /*return*/];
                                }
                                if (!(mutation.type === 'characterData')) return [3 /*break*/, 3];
                                return [4 /*yield*/, this.textWrapper.handleText(mutation.target)];
                            case 2:
                                _b.sent();
                                return [3 /*break*/, 7];
                            case 3:
                                if (!(mutation.type === 'childList')) return [3 /*break*/, 5];
                                return [4 /*yield*/, this.textWrapper.handleSubtree(mutation.target)];
                            case 4:
                                _b.sent();
                                return [3 /*break*/, 7];
                            case 5:
                                if (!(mutation.type === 'attributes')) return [3 /*break*/, 7];
                                return [4 /*yield*/, this.textWrapper.handleAttribute(mutation.target)];
                            case 6:
                                _b.sent();
                                _b.label = 7;
                            case 7:
                                mutationsList_1_1 = mutationsList_1.next();
                                return [3 /*break*/, 1];
                            case 8: return [3 /*break*/, 11];
                            case 9:
                                e_1_1 = _b.sent();
                                e_1 = { error: e_1_1 };
                                return [3 /*break*/, 11];
                            case 10:
                                try {
                                    if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return)) _a.call(mutationsList_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                                return [7 /*endfinally*/];
                            case 11:
                                this.nodeRegistrar.refreshAll();
                                return [2 /*return*/];
                        }
                    });
                }); });
            }
            return this._observer;
        },
        enumerable: false,
        configurable: true
    });
    Observer.prototype.observe = function () {
        if (!this.observer) {
            return;
        }
        if (this._observing) {
            return;
        }
        this._observing = true;
        this.observer.observe(this.properties.config.targetElement, {
            attributes: true,
            childList: true,
            subtree: true,
            characterData: true,
        });
    };
    Observer.prototype.stopObserving = function () {
        if (!this.observer) {
            return;
        }
        this._observing = false;
        this.observer.disconnect();
    };
    return Observer;
}());

var CoreService = /** @class */ (function () {
    function CoreService(properties, apiHttpService) {
        this.properties = properties;
        this.apiHttpService = apiHttpService;
    }
    CoreService.prototype.getLanguages = function () {
        return __awaiter(this, void 0, void 0, function () {
            var languages, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.languagePromise instanceof Promise)) {
                            this.languagePromise = this.apiHttpService.fetchJson("v2/projects/languages?size=1000&sort=tag");
                        }
                        _a = Set.bind;
                        return [4 /*yield*/, this.languagePromise];
                    case 1:
                        languages = new (_a.apply(Set, [void 0, (_b.sent())._embedded.languages.map(function (l) { return l.tag; })]))();
                        this.properties.preferredLanguages = new Set(Array.from(this.properties.preferredLanguages).filter(function (l) {
                            return languages.has(l);
                        }));
                        return [2 /*return*/, languages];
                }
            });
        });
    };
    CoreService.prototype.getLanguagesFull = function () {
        return __awaiter(this, void 0, void 0, function () {
            var languages;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.getLanguages();
                        return [4 /*yield*/, this.languagePromise];
                    case 1:
                        languages = _a.sent();
                        return [2 /*return*/, languages._embedded.languages];
                }
            });
        });
    };
    CoreService.prototype.getApiKeyDetails = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.apiHttpService.fetchJson("v2/api-keys/current")];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        // eslint-disable-next-line no-console
                        console.error(e_1);
                        // eslint-disable-next-line no-console
                        console.error('Error getting scopes. Trying to switch to production mode!');
                        this.properties.mode = 'production';
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CoreService.prototype.isAuthorizedTo = function (scope) {
        return this.properties.scopes.indexOf(scope) > -1;
    };
    CoreService.prototype.checkScope = function (scope) {
        if (!this.isAuthorizedTo(scope)) {
            throw new Error("Api key not permitted to do this, please add 'translations.view' scope.");
        }
    };
    CoreService.prototype.loadApiKeyDetails = function () {
        return __awaiter(this, void 0, void 0, function () {
            var details;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.properties.scopes === undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getApiKeyDetails()];
                    case 1:
                        details = _a.sent();
                        this.properties.scopes = details.scopes;
                        this.properties.projectId = details.projectId;
                        this.properties.permittedLanguageIds = details.permittedLanguageIds;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return CoreService;
}());

var API_KEY_LOCAL_STORAGE = '__tolgee_apiKey';
var API_URL_LOCAL_STORAGE = '__tolgee_apiUrl';
var DEFAULT_TARGET_ELEMENT_SUPPLIER = function () {
    if (typeof document !== 'undefined') {
        return document.body;
    }
};
var TolgeeConfig = /** @class */ (function () {
    function TolgeeConfig(config) {
        this.inputPrefix = '%-%tolgee:';
        this.inputSuffix = '%-%';
        /**
         * Used when auto detection is not available or is turned off
         */
        this.defaultLanguage = 'en';
        /**
         * Store user language in localStorage (default: true)
         */
        this.enableLanguageStore = true;
        /**
         * Use auto language detection by browser locale (default: true)
         */
        this.enableLanguageDetection = true;
        this.filesUrlPrefix = 'i18n/';
        this.tagAttributes = {
            textarea: ['placeholder'],
            input: ['value', 'placeholder'],
            img: ['alt'],
            '*': ['aria-label', 'title'],
        };
        this.highlightKeys = [exports.ModifierKey.Alt];
        this.passToParent = ['option', 'optgroup'];
        this.restrictedElements = ['script', 'style'];
        this.highlightColor = 'rgb(255, 0, 0)';
        this.highlightWidth = 5;
        this.wrapperMode = 'text';
        /**
         * When true, fallback language will be preloaded on Tolgee.run
         */
        this.preloadFallback = false;
        //workaround for: https://stackoverflow.com/questions/48725916/typescript-optional-property-with-a-getter
        Object.defineProperty(this, 'targetElement', {
            set: function (targetElement) {
                if (this.targetElement !== undefined) {
                    throw new Error('Target element is already defined!');
                }
                if (targetElement === undefined) {
                    this._targetElement = DEFAULT_TARGET_ELEMENT_SUPPLIER();
                }
                if (NodeHelper.isElementTargetElement(targetElement)) {
                    // eslint-disable-next-line no-console
                    console.error('Target element: ', this._targetElement);
                    throw new Error('An tolgee instance is inited with provided target element');
                }
                this._targetElement = targetElement;
                NodeHelper.markElementAsTargetElement(this._targetElement);
            },
            get: function () {
                return this._targetElement;
            },
        });
        Object.assign(this, config || {});
        if (typeof sessionStorage !== 'undefined') {
            this.apiUrl =
                sessionStorage.getItem(API_URL_LOCAL_STORAGE) || this.apiUrl;
            this.apiKey =
                sessionStorage.getItem(API_KEY_LOCAL_STORAGE) || this.apiKey;
        }
        if (this._targetElement === undefined) {
            this._targetElement = DEFAULT_TARGET_ELEMENT_SUPPLIER();
        }
        this.fallbackLanguage = this.fallbackLanguage || this.defaultLanguage;
        if (this.watch === undefined) {
            this.watch = Boolean(this.apiKey && this.apiUrl);
        }
        if (this.availableLanguages === undefined && this.staticData) {
            this.availableLanguages = Object.keys(this.staticData);
        }
    }
    return TolgeeConfig;
}());

var sleep = function (ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
};

var PluginManager = /** @class */ (function () {
    function PluginManager(messages, properties, eventService, elementRegistrar, translationService) {
        var _this = this;
        this.messages = messages;
        this.properties = properties;
        this.eventService = eventService;
        this.elementRegistrar = elementRegistrar;
        this.translationService = translationService;
        this.handshakeSucceed = false;
        this.takeScreenshot = function (translationData) {
            return new Promise(function (resolve, reject) {
                _this.translationService
                    .changeTranslations(translationData)
                    .then(function (revertChange) { return __awaiter(_this, void 0, void 0, function () {
                    var cancel_1, e_1;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                this.highlightAllByKey(translationData.key);
                                return [4 /*yield*/, sleep(100)];
                            case 1:
                                _a.sent();
                                this.messages.send('TOLGEE_TAKE_SCREENSHOT');
                                cancel_1 = this.messages.listen('TOLGEE_SCREENSHOT_TAKEN', function (data) {
                                    _this.unhighlightAllByKey(translationData.key);
                                    resolve(data);
                                    revertChange();
                                    cancel_1();
                                });
                                return [3 /*break*/, 3];
                            case 2:
                                e_1 = _a.sent();
                                revertChange();
                                reject(e_1);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); })
                    .catch(function (e) {
                    reject(e);
                });
            });
        };
        this.handshake = function () {
            var sharedConfiguration = __assign(__assign({}, _this.properties), { config: __assign(__assign({}, _this.properties.config), { 
                    //remove properties, which cannot be sent by window.postMessage
                    staticData: undefined, targetElement: undefined, _targetElement: undefined, ui: undefined }), uiPresent: Boolean(_this.properties.config.ui), uiVersion: "4.9.2" });
            var timer = null;
            var ping = function () {
                _this.messages.send('TOLGEE_READY', sharedConfiguration);
            };
            var finish = function () {
                clearInterval(timer);
            };
            _this.messages.listen('TOLGEE_PLUGIN_READY', function () {
                _this.handshakeSucceed = true;
                _this.messages.send('TOLGEE_READY', sharedConfiguration);
                finish();
            });
            ping();
            // try ping 5 times as sometimes extension doesn't respond right away
            var counter = 0;
            timer = setInterval(function () {
                if (!_this.handshakeSucceed && counter < 5) {
                    ping();
                    counter += 1;
                }
                else {
                    finish();
                }
            }, 200);
        };
    }
    PluginManager.prototype.run = function () {
        try {
            this.messages.startListening();
            this.handshake();
        }
        catch (e) {
            // eslint-disable-next-line no-console
            console.warn(e);
            // eslint-disable-next-line no-console
            console.warn('Can not start communication with browser plugin. Check waning above.');
        }
    };
    PluginManager.prototype.stop = function () {
        this.messages.stopListening();
    };
    PluginManager.prototype.highlightAllByKey = function (key) {
        this.elementRegistrar
            .findAllByKey(key)
            .forEach(function (el) { return el._tolgee.highlight(); });
    };
    PluginManager.prototype.unhighlightAllByKey = function (key) {
        this.elementRegistrar
            .findAllByKey(key)
            .forEach(function (el) { return el._tolgee.unhighlight(); });
    };
    return PluginManager;
}());

var Messages = /** @class */ (function () {
    function Messages() {
        var _this = this;
        this.listeners = [];
        this.startListening = function () {
            var receiveMessage = function (event) {
                if (event.source != window) {
                    return;
                }
                _this.listeners.forEach(function (listener) {
                    if (listener.type == event.data.type) {
                        listener.callback(event.data.data);
                    }
                });
            };
            window.addEventListener('message', receiveMessage, false);
            typeof _this._stopListening === 'function' && _this._stopListening();
            _this._stopListening = function () {
                window.removeEventListener('message', receiveMessage, false);
            };
        };
        this.listen = function (type, callback) {
            var listenerInfo = { type: type, callback: callback };
            _this.listeners.push(listenerInfo);
            // return callback to remove the listener
            return function () {
                _this.listeners.splice(_this.listeners.indexOf(listenerInfo), 1);
            };
        };
        this.send = function (type, data) {
            try {
                window.postMessage({ type: type, data: data }, window.origin);
            }
            catch (e) {
                // eslint-disable-next-line no-console
                console.warn('Cannot send message.', e);
            }
        };
    }
    Messages.prototype.stopListening = function () {
        this._stopListening();
    };
    return Messages;
}());

var HIGHLIGHTER_BASE_STYLE = {
    pointerEvents: 'none',
    position: 'fixed',
    boxSizing: 'content-box',
    zIndex: String(Number.MAX_SAFE_INTEGER),
    contain: 'layout',
    display: 'block',
    borderStyle: 'solid',
    borderRadius: '4px',
};
var HighlightFunctionsInitializer = /** @class */ (function () {
    function HighlightFunctionsInitializer(properties) {
        this.properties = properties;
    }
    HighlightFunctionsInitializer.prototype.initFunctions = function (element) {
        this.initHighlightFunction(element);
        this.initUnhighlightFunction(element);
    };
    HighlightFunctionsInitializer.prototype.initHighlightFunction = function (element) {
        var _this = this;
        element._tolgee.highlight = function () {
            var highlightColor = _this.properties.config.highlightColor;
            var highlightWidth = _this.properties.config.highlightWidth;
            if (!element.isConnected) {
                return;
            }
            var highlightEl = element._tolgee.highlightEl;
            if (!highlightEl) {
                highlightEl = document.createElement('div');
                highlightEl.classList.add(TOLGEE_HIGHLIGHTER_CLASS);
                Object.entries(HIGHLIGHTER_BASE_STYLE).forEach(function (_a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    highlightEl.style[key] = value;
                });
                highlightEl.style.borderColor = highlightColor;
                element._tolgee.highlightEl = highlightEl;
                document.body.appendChild(highlightEl);
            }
            var shape = element.getBoundingClientRect();
            highlightEl.style.borderWidth = highlightWidth + 'px';
            highlightEl.style.top = shape.top - highlightWidth + 'px';
            highlightEl.style.left = shape.left - highlightWidth + 'px';
            highlightEl.style.width = shape.width + 'px';
            highlightEl.style.height = shape.height + 'px';
        };
    };
    HighlightFunctionsInitializer.prototype.initUnhighlightFunction = function (element) {
        element._tolgee.unhighlight = function () {
            var _a;
            (_a = element._tolgee.highlightEl) === null || _a === void 0 ? void 0 : _a.remove();
            element._tolgee.highlightEl = null;
        };
    };
    return HighlightFunctionsInitializer;
}());

var ScreenshotService = /** @class */ (function () {
    function ScreenshotService(coreService, apiHttpService) {
        this.coreService = coreService;
        this.apiHttpService = apiHttpService;
    }
    ScreenshotService.prototype.uploadImage = function (blob) {
        return __awaiter(this, void 0, void 0, function () {
            var formData;
            return __generator(this, function (_a) {
                formData = new FormData();
                formData.append('image', blob);
                return [2 /*return*/, this.apiHttpService.postJson('v2/image-upload', undefined, {
                        headers: {},
                        body: formData,
                    })];
            });
        });
    };
    ScreenshotService.prototype.deleteImages = function (ids) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.apiHttpService.post("v2/image-upload/".concat(ids.join(',')), undefined, {
                        method: 'delete',
                    })];
            });
        });
    };
    return ScreenshotService;
}());

var ModuleService = /** @class */ (function () {
    function ModuleService() {
        var _this = this;
        this.formatter = null;
        this.addModule = function (module) {
            if (module.type === 'formatter') {
                var instance = new module();
                _this.formatter = instance;
            }
            else {
                throw new Error('Module with unknown type');
            }
        };
    }
    return ModuleService;
}());

var NodeHandler = /** @class */ (function () {
    function NodeHandler(properties, elementRegistrar, wrapper) {
        this.properties = properties;
        this.elementRegistrar = elementRegistrar;
        this.wrapper = wrapper;
    }
    NodeHandler.initParentElement = function (element) {
        if (element[TOLGEE_ATTRIBUTE_NAME] === undefined) {
            element[TOLGEE_ATTRIBUTE_NAME] = {
                nodes: new Set(),
            };
            element.setAttribute(TOLGEE_ATTRIBUTE_NAME, '');
        }
        return element;
    };
    NodeHandler.prototype.filterRestricted = function (nodes) {
        var restrictedElements = this.properties.config.restrictedElements;
        return nodes.filter(function (n) {
            var e = NodeHelper.closestElement(n);
            if (!e) {
                return false;
            }
            return (restrictedElements.indexOf(e.tagName.toLowerCase()) === -1 &&
                e.closest("[".concat(RESTRICTED_ASCENDANT_ATTRIBUTE, "=\"true\"]")) === null);
        });
    };
    NodeHandler.prototype.handleNodes = function (nodes) {
        return __awaiter(this, void 0, void 0, function () {
            var nodes_1, nodes_1_1, textNode, tolgeeData, result, text, keys, translatedNode, parentElement, e_1_1;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, 6, 7]);
                        nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next();
                        _b.label = 1;
                    case 1:
                        if (!!nodes_1_1.done) return [3 /*break*/, 4];
                        textNode = nodes_1_1.value;
                        if (textNode[TOLGEE_ATTRIBUTE_NAME] === undefined) {
                            textNode[TOLGEE_ATTRIBUTE_NAME] = {};
                        }
                        tolgeeData = textNode[TOLGEE_ATTRIBUTE_NAME];
                        if (!((tolgeeData === null || tolgeeData === void 0 ? void 0 : tolgeeData.locked) !== true)) return [3 /*break*/, 3];
                        this.lockNode(textNode);
                        return [4 /*yield*/, this.wrapper.unwrap(NodeHelper.getNodeText(textNode))];
                    case 2:
                        result = _b.sent();
                        if (result) {
                            text = result.text, keys = result.keys;
                            translatedNode = this.translateChildNode(textNode, text, keys);
                            parentElement = this.getParentElement(translatedNode);
                            parentElement._tolgee.nodes.add(translatedNode);
                            this.elementRegistrar.register(parentElement);
                        }
                        this.unlockNode(textNode);
                        _b.label = 3;
                    case 3:
                        nodes_1_1 = nodes_1.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    NodeHandler.prototype.translateChildNode = function (node, newValue, keys) {
        node[TOLGEE_ATTRIBUTE_NAME] = {
            oldTextContent: NodeHelper.getNodeText(node),
            keys: keys,
        };
        NodeHelper.setNodeText(node, newValue);
        return node;
    };
    NodeHandler.prototype.lockNode = function (node) {
        if (node[TOLGEE_ATTRIBUTE_NAME] === undefined) {
            node[TOLGEE_ATTRIBUTE_NAME] = {};
        }
        var tolgeeData = node[TOLGEE_ATTRIBUTE_NAME];
        if ((tolgeeData === null || tolgeeData === void 0 ? void 0 : tolgeeData.locked) !== true) {
            tolgeeData.locked = true;
        }
        return node;
    };
    NodeHandler.prototype.unlockNode = function (node) {
        if (node[TOLGEE_ATTRIBUTE_NAME]) {
            node[TOLGEE_ATTRIBUTE_NAME].locked = false;
        }
    };
    NodeHandler.prototype.getParentElement = function (node) {
        var parent = this.getSuitableParent(node);
        return NodeHandler.initParentElement(parent);
    };
    NodeHandler.prototype.getSuitableParent = function (node) {
        var domParent = NodeHelper.getParentElement(node);
        if (domParent === undefined) {
            // eslint-disable-next-line no-console
            console.error(node);
            throw new Error('No suitable parent found for node above.');
        }
        if (!this.properties.config.passToParent) {
            return domParent;
        }
        if (Array.isArray(this.properties.config.passToParent)) {
            var tagNameEquals = function (elementTagName) {
                return domParent.tagName.toLowerCase() === elementTagName.toLowerCase();
            };
            if (this.properties.config.passToParent.findIndex(tagNameEquals) === -1) {
                return domParent;
            }
        }
        if (typeof this.properties.config.passToParent === 'function') {
            if (!this.properties.config.passToParent(domParent)) {
                return domParent;
            }
        }
        return this.getSuitableParent(domParent);
    };
    return NodeHandler;
}());

var AttributeHandler$1 = /** @class */ (function () {
    function AttributeHandler(properties, nodeHandler) {
        this.properties = properties;
        this.nodeHandler = nodeHandler;
    }
    AttributeHandler.prototype.handle = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var inputPrefix, inputSuffix, _a, _b, _c, tag, attributes, attributes_1, attributes_1_1, attribute, expression, nodes, e_1_1, e_2_1;
            var e_2, _d, e_1, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        inputPrefix = this.properties.config.inputPrefix;
                        inputSuffix = this.properties.config.inputSuffix;
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 12, 13, 14]);
                        _a = __values(Object.entries(this.properties.config.tagAttributes)), _b = _a.next();
                        _f.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 11];
                        _c = __read(_b.value, 2), tag = _c[0], attributes = _c[1];
                        _f.label = 3;
                    case 3:
                        _f.trys.push([3, 8, 9, 10]);
                        attributes_1 = (e_1 = void 0, __values(attributes)), attributes_1_1 = attributes_1.next();
                        _f.label = 4;
                    case 4:
                        if (!!attributes_1_1.done) return [3 /*break*/, 7];
                        attribute = attributes_1_1.value;
                        expression = "descendant-or-self::".concat(tag, "/@").concat(attribute, "[contains(., '").concat(inputPrefix, "') and contains(., '").concat(inputSuffix, "')]");
                        nodes = NodeHelper.evaluate(expression, node);
                        return [4 /*yield*/, this.nodeHandler.handleNodes(nodes)];
                    case 5:
                        _f.sent();
                        _f.label = 6;
                    case 6:
                        attributes_1_1 = attributes_1.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (attributes_1_1 && !attributes_1_1.done && (_e = attributes_1.return)) _e.call(attributes_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        e_2_1 = _f.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 14];
                    case 13:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    return AttributeHandler;
}());

var TextHelper = /** @class */ (function () {
    function TextHelper() {
    }
    TextHelper.splitOnNonEscapedDelimiter = function (string, delimiter) {
        var result = [];
        var actual = '';
        var escaped = false;
        for (var i = 0; i < string.length; i++) {
            var char = string[i];
            if (char === '\\' && !escaped) {
                escaped = true;
                continue;
            }
            if (escaped) {
                escaped = false;
                actual += char;
                continue;
            }
            if (char === delimiter) {
                result.push(actual);
                actual = '';
                continue;
            }
            actual += char;
        }
        result.push(actual);
        return result;
    };
    TextHelper.isCharEscaped = function (position, fullString) {
        var escapeCharsCount = 0;
        while (position > -1 && fullString[position - 1] === '\\') {
            escapeCharsCount++;
            position--;
        }
        return escapeCharsCount % 2 == 1;
    };
    TextHelper.removeEscapes = function (string) {
        var result = '';
        var escaped = false;
        for (var i = 0; i < string.length; i++) {
            var char = string[i];
            if (char === '\\' && !escaped) {
                escaped = true;
                continue;
            }
            if (escaped) {
                escaped = false;
                result += char;
                continue;
            }
            result += char;
        }
        return result;
    };
    return TextHelper;
}());

var Coder$1 = /** @class */ (function () {
    function Coder(properties, textService) {
        this.properties = properties;
        this.textService = textService;
        this.escapeForRegExp = function (string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        };
        this.escapeParam = function (param) {
            if (typeof param === 'string') {
                return param.replace(/[,:\\]/gs, '\\$&');
            }
            if (typeof param === 'number' || typeof param === 'bigint') {
                return param.toString();
            }
            // eslint-disable-next-line no-console
            console.warn("Parameters of type \"".concat(typeof param, "\" are not supported in \"text\" wrapper mode."));
            return param;
        };
    }
    Object.defineProperty(Coder.prototype, "rawUnWrapRegex", {
        get: function () {
            var escapedPrefix = this.escapeForRegExp(this.properties.config.inputPrefix);
            var escapedSuffix = this.escapeForRegExp(this.properties.config.inputSuffix);
            return "(\\\\?)(".concat(escapedPrefix, "(.*?)").concat(escapedSuffix, ")");
        },
        enumerable: false,
        configurable: true
    });
    Coder.parseUnwrapped = function (unwrappedString) {
        var e_1, _a;
        var escaped = false;
        var actual = '';
        var paramName = '';
        var readingState = 'KEY';
        var result = {
            key: '',
            params: {},
            defaultValue: undefined,
        };
        try {
            for (var unwrappedString_1 = __values(unwrappedString), unwrappedString_1_1 = unwrappedString_1.next(); !unwrappedString_1_1.done; unwrappedString_1_1 = unwrappedString_1.next()) {
                var char = unwrappedString_1_1.value;
                if (char === '\\' && !escaped) {
                    escaped = true;
                    continue;
                }
                if (escaped) {
                    escaped = false;
                    actual += char;
                    continue;
                }
                if (readingState === 'KEY' && char === ',') {
                    readingState = 'DEFAULT_VALUE';
                    result.key = actual;
                    actual = '';
                    continue;
                }
                if (readingState === 'KEY' && char === ':') {
                    readingState = 'PARAM_NAME';
                    result.key = actual;
                    actual = '';
                    continue;
                }
                if (readingState === 'DEFAULT_VALUE' && char === ':') {
                    readingState = 'PARAM_NAME';
                    result.defaultValue = actual;
                    actual = '';
                    continue;
                }
                if (readingState === 'PARAM_NAME' && char === ':') {
                    readingState = 'PARAM_VALUE';
                    paramName = actual;
                    actual = '';
                    continue;
                }
                if (readingState === 'PARAM_VALUE' && char === ',') {
                    readingState = 'PARAM_NAME';
                    result.params[paramName] = actual;
                    actual = '';
                    continue;
                }
                actual += char;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (unwrappedString_1_1 && !unwrappedString_1_1.done && (_a = unwrappedString_1.return)) _a.call(unwrappedString_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (readingState === 'KEY') {
            result.key = actual;
        }
        if (readingState === 'DEFAULT_VALUE') {
            result.defaultValue = actual;
        }
        if (readingState === 'PARAM_VALUE') {
            result.params[paramName] = actual;
        }
        return result;
    };
    Coder.prototype.unwrap = function (text) {
        var matchRegexp = new RegExp(this.rawUnWrapRegex, 'gs');
        var keysAndParams = [];
        var matched = false;
        var match;
        var start = 0;
        var result = '';
        while ((match = matchRegexp.exec(text)) !== null) {
            var pre = match[1];
            var _a = __read(match, 4), fullMatch = _a[0]; _a[1]; var wrapped = _a[2], unwrapped = _a[3];
            var index = match.index, input = match.input;
            result += input.substr(start, index - start);
            start = index + fullMatch.length;
            if (pre === '\\') {
                if (!TextHelper.isCharEscaped(index, text)) {
                    result += wrapped;
                    continue;
                }
                pre = '';
            }
            var translated = this.getTranslatedWithMetadata(unwrapped);
            keysAndParams.push({
                key: translated.key,
                params: translated.params,
                defaultValue: translated.defaultValue,
            });
            matched = true;
            result += pre + translated.translated;
        }
        result += text.substring(start);
        if (matched) {
            return { text: result, keys: keysAndParams };
        }
        return undefined;
    };
    Coder.prototype.wrap = function (key, params, defaultValue) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (defaultValue === void 0) { defaultValue = undefined; }
        var paramString = Object.entries(params)
            .map(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            return "".concat(_this.escapeParam(name), ":").concat(_this.escapeParam(value));
        })
            .join(',');
        paramString = paramString.length ? ":".concat(paramString) : '';
        var defaultString = defaultValue !== undefined ? ",".concat(this.escapeParam(defaultValue)) : '';
        return "".concat(this.properties.config.inputPrefix).concat(this.escapeParam(key)).concat(defaultString).concat(paramString).concat(this.properties.config.inputSuffix);
    };
    Coder.prototype.getTranslatedWithMetadata = function (text) {
        var _a = Coder.parseUnwrapped(text), key = _a.key, params = _a.params, defaultValue = _a.defaultValue;
        var translated = this.textService.instant(key, params, undefined, false, defaultValue);
        return { translated: translated, key: key, params: params, defaultValue: defaultValue };
    };
    return Coder;
}());

var CoreHandler$1 = /** @class */ (function () {
    function CoreHandler(textHandler, eventService, properties, attributeHandler, coder, wrappedHandler) {
        this.textHandler = textHandler;
        this.eventService = eventService;
        this.properties = properties;
        this.attributeHandler = attributeHandler;
        this.coder = coder;
        this.wrappedHandler = wrappedHandler;
        if (typeof window !== 'undefined') {
            eventService.LANGUAGE_CHANGED.subscribe(this.refresh.bind(this));
            eventService.TRANSLATION_CHANGED.subscribe(this.refresh.bind(this));
        }
    }
    CoreHandler.prototype.handleSubtree = function (target) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.attributeHandler.handle(target)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.textHandler.handle(target)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.wrappedHandler.handle(target)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CoreHandler.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            var nodes, nodes_1, nodes_1_1, node, _a, _b, textNode, result, e_1_1, e_2_1;
            var e_2, _c, e_1, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        nodes = NodeHelper.evaluate("//*[@_tolgee]", this.properties.config.targetElement);
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 12, 13, 14]);
                        nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next();
                        _e.label = 2;
                    case 2:
                        if (!!nodes_1_1.done) return [3 /*break*/, 11];
                        node = nodes_1_1.value;
                        _e.label = 3;
                    case 3:
                        _e.trys.push([3, 8, 9, 10]);
                        _a = (e_1 = void 0, __values(node._tolgee.nodes)), _b = _a.next();
                        _e.label = 4;
                    case 4:
                        if (!!_b.done) return [3 /*break*/, 7];
                        textNode = _b.value;
                        return [4 /*yield*/, this.coder.unwrap(textNode._tolgee.oldTextContent)];
                    case 5:
                        result = _e.sent();
                        if (result) {
                            NodeHelper.setNodeText(textNode, result.text);
                        }
                        _e.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        nodes_1_1 = nodes_1.next();
                        return [3 /*break*/, 2];
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        e_2_1 = _e.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 14];
                    case 13:
                        try {
                            if (nodes_1_1 && !nodes_1_1.done && (_c = nodes_1.return)) _c.call(nodes_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    return CoreHandler;
}());

var ContentHandler$1 = /** @class */ (function () {
    function ContentHandler(properties, nodeHandler) {
        this.properties = properties;
        this.nodeHandler = nodeHandler;
    }
    ContentHandler.prototype.handle = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var inputPrefix, inputSuffix, xPath, nodes, filtered;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inputPrefix = this.properties.config.inputPrefix;
                        inputSuffix = this.properties.config.inputSuffix;
                        xPath = "./descendant-or-self::text()[contains(., '".concat(inputPrefix, "') and contains(., '").concat(inputSuffix, "')]");
                        nodes = NodeHelper.evaluate(xPath, node);
                        filtered = this.nodeHandler.filterRestricted(nodes);
                        return [4 /*yield*/, this.nodeHandler.handleNodes(filtered)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ContentHandler;
}());

var WrappedHandler = /** @class */ (function () {
    function WrappedHandler(elementRegistrar, nodeHandler) {
        this.elementRegistrar = elementRegistrar;
        this.nodeHandler = nodeHandler;
    }
    WrappedHandler.prototype.handle = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var xPath, nodes, filtered;
            var _this = this;
            return __generator(this, function (_a) {
                xPath = "./descendant-or-self::*[@".concat(TOLGEE_WRAPPED_ONLY_DATA_ATTRIBUTE, "]");
                nodes = NodeHelper.evaluate(xPath, node);
                filtered = this.nodeHandler.filterRestricted(nodes);
                filtered.forEach(function (element) {
                    var elementWithMeta = NodeHandler.initParentElement(element);
                    elementWithMeta._tolgee.wrappedWithElementOnlyKey = element.getAttribute(TOLGEE_WRAPPED_ONLY_DATA_ATTRIBUTE);
                    elementWithMeta._tolgee.wrappedWithElementOnlyDefaultHtml =
                        element.innerHTML;
                    _this.elementRegistrar.register(elementWithMeta);
                });
                return [2 /*return*/];
            });
        });
    };
    return WrappedHandler;
}());

var TextWrapper = /** @class */ (function () {
    function TextWrapper(eventService, properties, textService, elementRegistrar) {
        this.coder = new Coder$1(properties, textService);
        this.nodeHandler = new NodeHandler(properties, elementRegistrar, this);
        this.textHandler = new ContentHandler$1(properties, this.nodeHandler);
        this.attributeHandler = new AttributeHandler$1(properties, this.nodeHandler);
        this.wrappedHandler = new WrappedHandler(elementRegistrar, this.nodeHandler);
        this.coreHandler = new CoreHandler$1(this.textHandler, eventService, properties, this.attributeHandler, this.coder, this.wrappedHandler);
    }
    TextWrapper.prototype.handleText = function (node) {
        return this.textHandler.handle(node);
    };
    TextWrapper.prototype.handleSubtree = function (node) {
        return this.coreHandler.handleSubtree(node);
    };
    TextWrapper.prototype.handleAttribute = function (node) {
        return this.attributeHandler.handle(node);
    };
    TextWrapper.prototype.wrap = function (key, params, defaultValue, translation) {
        if (params === void 0) { params = {}; }
        if (defaultValue === void 0) { defaultValue = undefined; }
        return this.coder.wrap(key, params, defaultValue);
    };
    TextWrapper.prototype.unwrap = function (text) {
        return this.coder.unwrap(text);
    };
    return TextWrapper;
}());

// TextEncoder/TextDecoder polyfills for utf-8 - an implementation of TextEncoder/TextDecoder APIs
// Written in 2013 by Viktor Mukhachev <vic99999@yandex.ru>
// To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
// You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
// Some important notes about the polyfill below:
// Native TextEncoder/TextDecoder implementation is overwritten
// String.prototype.codePointAt polyfill not included, as well as String.fromCodePoint
// TextEncoder.prototype.encode returns a regular array instead of Uint8Array
// No options (fatal of the TextDecoder constructor and stream of the TextDecoder.prototype.decode method) are supported.
// TextDecoder.prototype.decode does not valid byte sequences
// This is a demonstrative implementation not intended to have the best performance
// http://encoding.spec.whatwg.org/#textencoder
// http://encoding.spec.whatwg.org/#textencoder
function PTextEncoder() { }
PTextEncoder.prototype.encode = function (string) {
    var octets = [];
    var length = string.length;
    var i = 0;
    while (i < length) {
        var codePoint = string.codePointAt(i);
        var c = 0;
        var bits = 0;
        if (codePoint <= 0x0000007f) {
            c = 0;
            bits = 0x00;
        }
        else if (codePoint <= 0x000007ff) {
            c = 6;
            bits = 0xc0;
        }
        else if (codePoint <= 0x0000ffff) {
            c = 12;
            bits = 0xe0;
        }
        else if (codePoint <= 0x001fffff) {
            c = 18;
            bits = 0xf0;
        }
        octets.push(bits | (codePoint >> c));
        c -= 6;
        while (c >= 0) {
            octets.push(0x80 | ((codePoint >> c) & 0x3f));
            c -= 6;
        }
        i += codePoint >= 0x10000 ? 2 : 1;
    }
    return octets;
};
function PTextDecoder() { }
PTextDecoder.prototype.decode = function (octets) {
    var string = '';
    var i = 0;
    while (i < octets.length) {
        var octet = octets[i];
        var bytesNeeded = 0;
        var codePoint = 0;
        if (octet <= 0x7f) {
            bytesNeeded = 0;
            codePoint = octet & 0xff;
        }
        else if (octet <= 0xdf) {
            bytesNeeded = 1;
            codePoint = octet & 0x1f;
        }
        else if (octet <= 0xef) {
            bytesNeeded = 2;
            codePoint = octet & 0x0f;
        }
        else if (octet <= 0xf4) {
            bytesNeeded = 3;
            codePoint = octet & 0x07;
        }
        if (octets.length - i - bytesNeeded > 0) {
            var k = 0;
            while (k < bytesNeeded) {
                octet = octets[i + k + 1];
                codePoint = (codePoint << 6) | (octet & 0x3f);
                k += 1;
            }
        }
        else {
            codePoint = 0xfffd;
            bytesNeeded = octets.length - i;
        }
        string += String.fromCodePoint(codePoint);
        i += bytesNeeded + 1;
    }
    return string;
};
var Encoder = (typeof TextEncoder === 'undefined'
    ? PTextEncoder
    : TextEncoder);
var Decoder = (typeof TextDecoder === 'undefined'
    ? PTextDecoder
    : TextDecoder);

var INVISIBLE_CHARACTERS = ['\u200C', '\u200D'];
var INVISIBLE_REGEX = RegExp("([".concat(INVISIBLE_CHARACTERS.join(''), "]{9})+"), 'gu');
var toBytes = function (text) {
    return Array.from(new Encoder().encode(text));
};
var fromBytes = function (bytes) {
    return new Decoder().decode(new Uint8Array(bytes));
};
var padToWholeBytes = function (binary) {
    var needsToAdd = 8 - binary.length;
    return '0'.repeat(needsToAdd) + binary;
};
var encodeMessage = function (text) {
    var bytes = toBytes(text).map(Number);
    var binary = bytes
        .map(function (byte) { return padToWholeBytes(byte.toString(2)) + '0'; })
        .join('');
    var result = Array.from(binary)
        .map(function (b) { return INVISIBLE_CHARACTERS[Number(b)]; })
        .join('');
    return result;
};
var decodeMessage = function (message) {
    var binary = Array.from(message)
        .map(function (character) {
        return INVISIBLE_CHARACTERS.indexOf(character);
    })
        .map(String)
        .join('');
    var textBytes = binary.match(/(.{9})/g);
    var codes = Uint8Array.from(textBytes.map(function (byte) { return parseInt(byte.slice(0, 8), 2); }));
    return fromBytes(codes);
};
var decodeFromText = function (text) {
    var _a;
    var invisibleMessages = (_a = text
        .match(INVISIBLE_REGEX)) === null || _a === void 0 ? void 0 : _a.filter(function (m) { return m.length > 8; });
    return (invisibleMessages === null || invisibleMessages === void 0 ? void 0 : invisibleMessages.map(decodeMessage)) || [];
};
var removeSecrets = function (text) {
    return text.replace(INVISIBLE_REGEX, '');
};
var stringToCodePoints = function (text) {
    var e_1, _a;
    var result = [];
    try {
        for (var text_1 = __values(text), text_1_1 = text_1.next(); !text_1_1.done; text_1_1 = text_1.next()) {
            var codePoint = text_1_1.value;
            result.push(codePoint.codePointAt(0));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (text_1_1 && !text_1_1.done && (_a = text_1.return)) _a.call(text_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
};

var AttributeHandler = /** @class */ (function () {
    function AttributeHandler(properties, nodeHandler) {
        this.properties = properties;
        this.nodeHandler = nodeHandler;
    }
    AttributeHandler.prototype.handle = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, tag, attributes, attributes_1, attributes_1_1, attribute, expression, nodes, e_1_1, e_2_1;
            var e_2, _d, e_1, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _f.trys.push([0, 11, 12, 13]);
                        _a = __values(Object.entries(this.properties.config.tagAttributes)), _b = _a.next();
                        _f.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 10];
                        _c = __read(_b.value, 2), tag = _c[0], attributes = _c[1];
                        _f.label = 2;
                    case 2:
                        _f.trys.push([2, 7, 8, 9]);
                        attributes_1 = (e_1 = void 0, __values(attributes)), attributes_1_1 = attributes_1.next();
                        _f.label = 3;
                    case 3:
                        if (!!attributes_1_1.done) return [3 /*break*/, 6];
                        attribute = attributes_1_1.value;
                        expression = "descendant-or-self::".concat(tag, "/@").concat(attribute, "[contains(., '").concat(INVISIBLE_CHARACTERS[0], "')]");
                        nodes = NodeHelper.evaluate(expression, node);
                        return [4 /*yield*/, this.nodeHandler.handleNodes(nodes)];
                    case 4:
                        _f.sent();
                        _f.label = 5;
                    case 5:
                        attributes_1_1 = attributes_1.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (attributes_1_1 && !attributes_1_1.done && (_e = attributes_1.return)) _e.call(attributes_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 10: return [3 /*break*/, 13];
                    case 11:
                        e_2_1 = _f.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 13];
                    case 12:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    return AttributeHandler;
}());

var ValueMemory = /** @class */ (function () {
    function ValueMemory() {
        this.values = [];
    }
    ValueMemory.prototype.valueToNumber = function (key) {
        var index = this.values.indexOf(key);
        if (index === -1) {
            index = this.values.length;
            this.values.push(key);
        }
        return index;
    };
    ValueMemory.prototype.numberToValue = function (num) {
        return this.values[num];
    };
    return ValueMemory;
}());

var Coder = /** @class */ (function () {
    function Coder() {
        this.keyMemory = new ValueMemory();
        this.defaultMemory = new ValueMemory();
    }
    Coder.prototype.unwrap = function (text) {
        var _this = this;
        var keysAndParams = [];
        var messages = decodeFromText(text);
        messages.forEach(function (msg) {
            var _a = __read(stringToCodePoints(msg), 2), keyCode = _a[0], defaultCode = _a[1];
            var key = _this.keyMemory.numberToValue(keyCode);
            var defaultValue = defaultCode !== undefined
                ? _this.defaultMemory.numberToValue(defaultCode)
                : undefined;
            keysAndParams.push({
                key: key,
                params: undefined,
                defaultValue: defaultValue,
            });
        });
        var result = removeSecrets(text);
        if (keysAndParams.length) {
            return { text: result, keys: keysAndParams };
        }
        return undefined;
    };
    Coder.prototype.wrap = function (key, _params, defaultValue, translation) {
        if (defaultValue === void 0) { defaultValue = undefined; }
        if (translation === void 0) { translation = undefined; }
        var codes = [this.keyMemory.valueToNumber(key)];
        if (defaultValue) {
            codes.push(this.defaultMemory.valueToNumber(defaultValue));
        }
        var value = translation || '';
        var invisibleMark = encodeMessage(String.fromCodePoint.apply(String, __spreadArray([], __read(codes), false)));
        return typeof value === 'string'
            ? value + invisibleMark
            : Array.isArray(value)
                ? __spreadArray(__spreadArray([], __read(value), false), [invisibleMark], false) : [value, invisibleMark];
    };
    return Coder;
}());

var CoreHandler = /** @class */ (function () {
    function CoreHandler(textHandler, attributeHandler, wrappedHandler) {
        this.textHandler = textHandler;
        this.attributeHandler = attributeHandler;
        this.wrappedHandler = wrappedHandler;
    }
    CoreHandler.prototype.handleSubtree = function (target) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.attributeHandler.handle(target)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.textHandler.handle(target)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.wrappedHandler.handle(target)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return CoreHandler;
}());

var ContentHandler = /** @class */ (function () {
    function ContentHandler(nodeHandler) {
        this.nodeHandler = nodeHandler;
    }
    ContentHandler.prototype.handle = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var xPath, nodes, filtered;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        xPath = "./descendant-or-self::text()[contains(., '".concat(INVISIBLE_CHARACTERS[0], "')]");
                        nodes = NodeHelper.evaluate(xPath, node);
                        filtered = this.nodeHandler.filterRestricted(nodes);
                        return [4 /*yield*/, this.nodeHandler.handleNodes(filtered)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ContentHandler;
}());

var InvisibleWrapper = /** @class */ (function () {
    function InvisibleWrapper(properties, elementRegistrar) {
        this.coder = new Coder();
        this.nodeHandler = new NodeHandler(properties, elementRegistrar, this);
        this.textHandler = new ContentHandler(this.nodeHandler);
        this.attributeHandler = new AttributeHandler(properties, this.nodeHandler);
        this.wrappedHandler = new WrappedHandler(elementRegistrar, this.nodeHandler);
        this.coreHandler = new CoreHandler(this.textHandler, this.attributeHandler, this.wrappedHandler);
    }
    InvisibleWrapper.prototype.handleText = function (node) {
        return this.textHandler.handle(node);
    };
    InvisibleWrapper.prototype.handleSubtree = function (node) {
        return this.coreHandler.handleSubtree(node);
    };
    InvisibleWrapper.prototype.handleAttribute = function (node) {
        return this.attributeHandler.handle(node);
    };
    InvisibleWrapper.prototype.wrap = function (key, params, defaultValue, translation) {
        if (params === void 0) { params = {}; }
        if (defaultValue === void 0) { defaultValue = undefined; }
        if (translation === void 0) { translation = ''; }
        return this.coder.wrap(key, params, defaultValue, translation);
    };
    InvisibleWrapper.prototype.unwrap = function (text) {
        return this.coder.unwrap(text);
    };
    return InvisibleWrapper;
}());

var DependencyService = /** @class */ (function () {
    function DependencyService() {
        var _this = this;
        this.properties = new Properties();
        this.eventService = new EventService();
        this.apiHttpService = new ApiHttpService(this.properties);
        this.mouseEventHandler = new MouseEventHandler(this);
        this.moduleService = new ModuleService();
        this.coreService = new CoreService(this.properties, this.apiHttpService);
        this.screenshotService = new ScreenshotService(this.coreService, this.apiHttpService);
        this.translationService = new TranslationService(this.properties, this.coreService, this.apiHttpService, this.eventService);
        this.textService = new TextService(this.properties, this.translationService, this.moduleService);
        this.highlightFunctionInitializer = new HighlightFunctionsInitializer(this.properties);
        this.translationHighlighter = new TranslationHighlighter(this);
        this.elementRegistrar = new ElementRegistrar(this.properties, this.translationHighlighter, this.eventService);
        this.messages = new Messages();
        this.pluginManager = new PluginManager(this.messages, this.properties, this.eventService, this.elementRegistrar, this.translationService);
        this.run = function () {
            _this.mouseEventHandler.run();
        };
        this.stop = function () {
            _this.observer.stopObserving();
            _this.elementRegistrar.cleanAll();
            _this.mouseEventHandler.stop();
            NodeHelper.unmarkElementAsTargetElement(_this.properties.config.targetElement);
        };
        this.translationHighlighter.pluginManager = this.pluginManager;
    }
    DependencyService.prototype.init = function (config) {
        if (this.properties.config) {
            throw new Error('Duplicate initialization of config');
        }
        this.properties.config = new TolgeeConfig(config);
        if (this.properties.config.wrapperMode === 'invisible') {
            this.wrapper = new InvisibleWrapper(this.properties, this.elementRegistrar);
        }
        else {
            this.wrapper = new TextWrapper(this.eventService, this.properties, this.textService, this.elementRegistrar);
        }
        this.observer = new Observer(this.properties, this.wrapper, this.elementRegistrar);
        this.translationService.initStatic();
    };
    return DependencyService;
}());

var Tolgee = /** @class */ (function () {
    function Tolgee() {
        var _this = this;
        this.stop = function () {
            _this.dependencyService.stop();
        };
        this.dependencyService = new DependencyService();
    }
    Object.defineProperty(Tolgee.prototype, "properties", {
        get: function () {
            return this.dependencyService.properties;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tolgee.prototype, "lang", {
        get: function () {
            return this.properties.currentLanguage;
        },
        /**
         * This sets a new language.
         *
         * Using this setter can behave buggy when you change languages
         * too fast, since it changes the language property before
         * translations are actually loaded.
         * @deprecated use asynchronous changeLanguage method.
         */
        set: function (newLanguage) {
            var _this = this;
            this.properties.currentLanguage = newLanguage;
            this.dependencyService.translationService
                .loadTranslations(newLanguage)
                .then(function () {
                _this.emitLangChangeEvent(newLanguage);
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tolgee.prototype, "defaultLanguage", {
        get: function () {
            return this.properties.config.defaultLanguage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tolgee.prototype, "onLangChange", {
        get: function () {
            return this.dependencyService.eventService.LANGUAGE_CHANGED;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tolgee.prototype, "onTranslationChange", {
        get: function () {
            return this.dependencyService.eventService.TRANSLATION_CHANGED;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tolgee.prototype, "onLangLoaded", {
        /**
         * Is emitted when language is loaded for the first time
         */
        get: function () {
            return this.dependencyService.eventService.LANGUAGE_LOADED;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tolgee.prototype, "initialLoading", {
        /**
         * True if loading is needed to wait for Tolgee init.
         * When translation data are provided statically (using import
         * as staticData config property) then there is no need for translation
         * fetching so initial loading is not needed at all.
         */
        get: function () {
            var _a, _b;
            var currentLang = this.properties.currentLanguage;
            var fallbackLang = this.properties.config.fallbackLanguage;
            var fallbackPreloading = this.properties.config.preloadFallback;
            var isStaticDataProvided = function (data) {
                return data !== undefined && typeof data !== 'function';
            };
            return (!isStaticDataProvided((_a = this.properties.config.staticData) === null || _a === void 0 ? void 0 : _a[currentLang]) ||
                (!!fallbackPreloading &&
                    !isStaticDataProvided((_b = this.properties.config.staticData) === null || _b === void 0 ? void 0 : _b[fallbackLang])));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tolgee.prototype, "coreService", {
        get: function () {
            return this.dependencyService.coreService;
        },
        enumerable: false,
        configurable: true
    });
    Tolgee.use = function (module) {
        return new Tolgee().use(module);
    };
    Tolgee.init = function (config) {
        return new Tolgee().init(config);
    };
    /**
     * Sets the new language.
     *
     * Emits the onLangChange and onLangChangeAndLoad events after
     * the translations are loaded.
     *
     * @return Promise<void> Resolves when translations are loaded
     */
    Tolgee.prototype.changeLanguage = function (newLanguage) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.dependencyService.translationService.loadTranslations(newLanguage)];
                    case 1:
                        _a.sent();
                        this.properties.currentLanguage = newLanguage;
                        this.emitLangChangeEvent(newLanguage);
                        return [2 /*return*/];
                }
            });
        });
    };
    Tolgee.prototype.use = function (module) {
        this.dependencyService.moduleService.addModule(module);
        return this;
    };
    Tolgee.prototype.init = function (config) {
        this.dependencyService.init(config);
        var _a = this.dependencyService.properties.config, apiKey = _a.apiKey, apiUrl = _a.apiUrl;
        this.dependencyService.properties.mode =
            apiKey && apiUrl ? 'development' : 'production';
        return this;
    };
    Tolgee.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.dependencyService.run();
                        if (!(this.properties.mode === 'development')) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.coreService.loadApiKeyDetails()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        // eslint-disable-next-line no-console
                        console.error("Couldn't connect to Tolgee");
                        // eslint-disable-next-line no-console
                        console.error(e_1);
                        this.properties.mode = 'production';
                        return [3 /*break*/, 4];
                    case 4: return [4 /*yield*/, this.dependencyService.translationService.loadTranslations()];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.dependencyService.pluginManager.run()];
                    case 6:
                        _a.sent();
                        if (!this.properties.config.preloadFallback) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.dependencyService.translationService.loadTranslations(this.properties.config.fallbackLanguage)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [4 /*yield*/, this.refresh()];
                    case 9:
                        _a.sent();
                        if (this.properties.config.watch) {
                            this.dependencyService.observer.observe();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Tolgee.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.dependencyService.wrapper.handleSubtree(this.properties.config.targetElement)];
            });
        });
    };
    Tolgee.prototype.translate = function (keyOrProps, params, noWrap, defaultValue) {
        if (params === void 0) { params = {}; }
        if (noWrap === void 0) { noWrap = false; }
        if (defaultValue === void 0) { defaultValue = undefined; }
        return __awaiter(this, void 0, void 0, function () {
            var key, orEmpty, props, translation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = typeof keyOrProps === 'string' ? keyOrProps : keyOrProps.key;
                        orEmpty = undefined;
                        if (typeof keyOrProps === 'object') {
                            props = keyOrProps;
                            // if values are not provided in props object, get them from function
                            // params defaults
                            params = props.params !== undefined ? props.params : params;
                            noWrap = props.noWrap !== undefined ? props.noWrap : noWrap;
                            defaultValue =
                                props.defaultValue !== undefined ? props.defaultValue : defaultValue;
                            orEmpty = props.orEmpty;
                        }
                        return [4 /*yield*/, this.dependencyService.textService.translate(key, params, undefined, orEmpty, defaultValue)];
                    case 1:
                        translation = _a.sent();
                        if (!(this.properties.mode === 'development' && !noWrap)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.coreService.loadApiKeyDetails()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.dependencyService.wrapper.wrap(key, params, defaultValue, translation)];
                    case 3: return [2 /*return*/, translation];
                }
            });
        });
    };
    Tolgee.prototype.wrap = function (key, params, defaultValue, translation) {
        if (this.properties.mode === 'development') {
            return this.dependencyService.wrapper.wrap(key, params, defaultValue, translation);
        }
        else {
            return translation || defaultValue;
        }
    };
    Tolgee.prototype.instant = function (keyOrProps, params, noWrap, orEmpty, defaultValue) {
        if (params === void 0) { params = {}; }
        if (noWrap === void 0) { noWrap = false; }
        var key = typeof keyOrProps === 'string' ? keyOrProps : keyOrProps.key;
        if (typeof keyOrProps === 'object') {
            var props = keyOrProps;
            // if values are not provided in props object, get them from function
            // params defaults
            params = props.params !== undefined ? props.params : params;
            noWrap = props.noWrap !== undefined ? props.noWrap : noWrap;
            defaultValue =
                props.defaultValue !== undefined ? props.defaultValue : defaultValue;
            orEmpty = props.orEmpty !== undefined ? props.orEmpty : orEmpty;
        }
        var translation = this.dependencyService.textService.instant(key, params, undefined, orEmpty, defaultValue);
        if (this.properties.mode === 'development' && !noWrap) {
            return this.dependencyService.wrapper.wrap(key, params, defaultValue, translation);
        }
        return translation;
    };
    /**
     * Get currently cached translations for all languages
     */
    Tolgee.prototype.getCachedTranslations = function () {
        return this.dependencyService.translationService.getCachedTranslations();
    };
    /**
     * Loads translations for given language or returns them from cache
     * @returns Loaded translations
     */
    Tolgee.prototype.loadTranslations = function (lang) {
        return this.dependencyService.translationService.loadTranslations(lang);
    };
    Tolgee.prototype.emitLangChangeEvent = function (value) {
        var langChangedEmitter = this.onLangChange;
        langChangedEmitter.emit(value);
    };
    return Tolgee;
}());

var ErrorKind;
(function (ErrorKind) {
    /** Argument is unclosed (e.g. `{0`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
    /** Argument is empty (e.g. `{}`). */
    ErrorKind[ErrorKind["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
    /** Argument is malformed (e.g. `{foo!}``) */
    ErrorKind[ErrorKind["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
    /** Expect an argument type (e.g. `{foo,}`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
    /** Unsupported argument type (e.g. `{foo,foo}`) */
    ErrorKind[ErrorKind["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
    /** Expect an argument style (e.g. `{foo, number, }`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
    /** The number skeleton is invalid. */
    ErrorKind[ErrorKind["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
    /** The date time skeleton is invalid. */
    ErrorKind[ErrorKind["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */
    ErrorKind[ErrorKind["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */
    ErrorKind[ErrorKind["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */
    ErrorKind[ErrorKind["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
    /** Missing select argument options (e.g. `{foo, select}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */
    ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
    /**
     * Expecting a message fragment after the `plural` or `selectordinal` selector
     * (e.g. `{foo, plural, one}`)
     */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */
    ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
    /**
     * Duplicate selectors in `plural` or `selectordinal` argument.
     * (e.g. {foo, plural, one {#} one {#}})
     */
    ErrorKind[ErrorKind["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
    /** Duplicate selectors in `select` argument.
     * (e.g. {foo, select, apple {apple} apple {apple}})
     */
    ErrorKind[ErrorKind["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
    /** Plural or select argument option must have `other` clause. */
    ErrorKind[ErrorKind["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */
    ErrorKind[ErrorKind["INVALID_TAG"] = 23] = "INVALID_TAG";
    /** The tag name is invalid. (e.g. `<123>foo</123>`) */
    ErrorKind[ErrorKind["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */
    ErrorKind[ErrorKind["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */
    ErrorKind[ErrorKind["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind || (ErrorKind = {}));

var TYPE;
(function (TYPE) {
    /**
     * Raw text
     */
    TYPE[TYPE["literal"] = 0] = "literal";
    /**
     * Variable w/o any format, e.g `var` in `this is a {var}`
     */
    TYPE[TYPE["argument"] = 1] = "argument";
    /**
     * Variable w/ number format
     */
    TYPE[TYPE["number"] = 2] = "number";
    /**
     * Variable w/ date format
     */
    TYPE[TYPE["date"] = 3] = "date";
    /**
     * Variable w/ time format
     */
    TYPE[TYPE["time"] = 4] = "time";
    /**
     * Variable w/ select format
     */
    TYPE[TYPE["select"] = 5] = "select";
    /**
     * Variable w/ plural format
     */
    TYPE[TYPE["plural"] = 6] = "plural";
    /**
     * Only possible within plural argument.
     * This is the `#` symbol that will be substituted with the count.
     */
    TYPE[TYPE["pound"] = 7] = "pound";
    /**
     * XML-like tag
     */
    TYPE[TYPE["tag"] = 8] = "tag";
})(TYPE || (TYPE = {}));
var SKELETON_TYPE;
(function (SKELETON_TYPE) {
    SKELETON_TYPE[SKELETON_TYPE["number"] = 0] = "number";
    SKELETON_TYPE[SKELETON_TYPE["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE || (SKELETON_TYPE = {}));
/**
 * Type Guards
 */
function isLiteralElement(el) {
    return el.type === TYPE.literal;
}
function isArgumentElement(el) {
    return el.type === TYPE.argument;
}
function isNumberElement(el) {
    return el.type === TYPE.number;
}
function isDateElement(el) {
    return el.type === TYPE.date;
}
function isTimeElement(el) {
    return el.type === TYPE.time;
}
function isSelectElement(el) {
    return el.type === TYPE.select;
}
function isPluralElement(el) {
    return el.type === TYPE.plural;
}
function isPoundElement(el) {
    return el.type === TYPE.pound;
}
function isTagElement(el) {
    return el.type === TYPE.tag;
}
function isNumberSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
}
function isDateTimeSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
}

// @generated from regex-gen.ts
var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

/**
 * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
 * with some tweaks
 */
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
/**
 * Parse Date time skeleton into Intl.DateTimeFormatOptions
 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * @public
 * @param skeleton skeleton string
 */
function parseDateTimeSkeleton(skeleton) {
    var result = {};
    skeleton.replace(DATE_TIME_REGEX, function (match) {
        var len = match.length;
        switch (match[0]) {
            // Era
            case 'G':
                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                break;
            // Year
            case 'y':
                result.year = len === 2 ? '2-digit' : 'numeric';
                break;
            case 'Y':
            case 'u':
            case 'U':
            case 'r':
                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
            // Quarter
            case 'q':
            case 'Q':
                throw new RangeError('`q/Q` (quarter) patterns are not supported');
            // Month
            case 'M':
            case 'L':
                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                break;
            // Week
            case 'w':
            case 'W':
                throw new RangeError('`w/W` (week) patterns are not supported');
            case 'd':
                result.day = ['numeric', '2-digit'][len - 1];
                break;
            case 'D':
            case 'F':
            case 'g':
                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
            // Weekday
            case 'E':
                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                break;
            case 'e':
                if (len < 4) {
                    throw new RangeError('`e..eee` (weekday) patterns are not supported');
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
            case 'c':
                if (len < 4) {
                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
            // Period
            case 'a': // AM, PM
                result.hour12 = true;
                break;
            case 'b': // am, pm, noon, midnight
            case 'B': // flexible day periods
                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
            // Hour
            case 'h':
                result.hourCycle = 'h12';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'H':
                result.hourCycle = 'h23';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'K':
                result.hourCycle = 'h11';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'k':
                result.hourCycle = 'h24';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'j':
            case 'J':
            case 'C':
                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
            // Minute
            case 'm':
                result.minute = ['numeric', '2-digit'][len - 1];
                break;
            // Second
            case 's':
                result.second = ['numeric', '2-digit'][len - 1];
                break;
            case 'S':
            case 'A':
                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
            // Zone
            case 'z': // 1..3, 4: specific non-location format
                result.timeZoneName = len < 4 ? 'short' : 'long';
                break;
            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
            case 'O': // 1, 4: miliseconds in day short, long
            case 'v': // 1, 4: generic non-location format
            case 'V': // 1, 2, 3, 4: time zone ID or city
            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
                throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');
        }
        return '';
    });
    return result;
}

// @generated from regex-gen.ts
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

function parseNumberSkeletonFromString(skeleton) {
    if (skeleton.length === 0) {
        throw new Error('Number skeleton cannot be empty');
    }
    // Parse the skeleton
    var stringTokens = skeleton
        .split(WHITE_SPACE_REGEX)
        .filter(function (x) { return x.length > 0; });
    var tokens = [];
    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
        var stringToken = stringTokens_1[_i];
        var stemAndOptions = stringToken.split('/');
        if (stemAndOptions.length === 0) {
            throw new Error('Invalid number skeleton');
        }
        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
            var option = options_1[_a];
            if (option.length === 0) {
                throw new Error('Invalid number skeleton');
            }
        }
        tokens.push({ stem: stem, options: options });
    }
    return tokens;
}
function icuUnitToEcma(unit) {
    return unit.replace(/^(.*?)-/, '');
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
    var result = {};
    if (str[str.length - 1] === 'r') {
        result.roundingPriority = 'morePrecision';
    }
    else if (str[str.length - 1] === 's') {
        result.roundingPriority = 'lessPrecision';
    }
    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
        // @@@ case
        if (typeof g2 !== 'string') {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length;
        }
        // @@@+ case
        else if (g2 === '+') {
            result.minimumSignificantDigits = g1.length;
        }
        // .### case
        else if (g1[0] === '#') {
            result.maximumSignificantDigits = g1.length;
        }
        // .@@## or .@@@ case
        else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits =
                g1.length + (typeof g2 === 'string' ? g2.length : 0);
        }
        return '';
    });
    return result;
}
function parseSign(str) {
    switch (str) {
        case 'sign-auto':
            return {
                signDisplay: 'auto',
            };
        case 'sign-accounting':
        case '()':
            return {
                currencySign: 'accounting',
            };
        case 'sign-always':
        case '+!':
            return {
                signDisplay: 'always',
            };
        case 'sign-accounting-always':
        case '()!':
            return {
                signDisplay: 'always',
                currencySign: 'accounting',
            };
        case 'sign-except-zero':
        case '+?':
            return {
                signDisplay: 'exceptZero',
            };
        case 'sign-accounting-except-zero':
        case '()?':
            return {
                signDisplay: 'exceptZero',
                currencySign: 'accounting',
            };
        case 'sign-never':
        case '+_':
            return {
                signDisplay: 'never',
            };
    }
}
function parseConciseScientificAndEngineeringStem(stem) {
    // Engineering
    var result;
    if (stem[0] === 'E' && stem[1] === 'E') {
        result = {
            notation: 'engineering',
        };
        stem = stem.slice(2);
    }
    else if (stem[0] === 'E') {
        result = {
            notation: 'scientific',
        };
        stem = stem.slice(1);
    }
    if (result) {
        var signDisplay = stem.slice(0, 2);
        if (signDisplay === '+!') {
            result.signDisplay = 'always';
            stem = stem.slice(2);
        }
        else if (signDisplay === '+?') {
            result.signDisplay = 'exceptZero';
            stem = stem.slice(2);
        }
        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
            throw new Error('Malformed concise eng/scientific notation');
        }
        result.minimumIntegerDigits = stem.length;
    }
    return result;
}
function parseNotationOptions(opt) {
    var result = {};
    var signOpts = parseSign(opt);
    if (signOpts) {
        return signOpts;
    }
    return result;
}
/**
 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
 */
function parseNumberSkeleton(tokens) {
    var result = {};
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        switch (token.stem) {
            case 'percent':
            case '%':
                result.style = 'percent';
                continue;
            case '%x100':
                result.style = 'percent';
                result.scale = 100;
                continue;
            case 'currency':
                result.style = 'currency';
                result.currency = token.options[0];
                continue;
            case 'group-off':
            case ',_':
                result.useGrouping = false;
                continue;
            case 'precision-integer':
            case '.':
                result.maximumFractionDigits = 0;
                continue;
            case 'measure-unit':
            case 'unit':
                result.style = 'unit';
                result.unit = icuUnitToEcma(token.options[0]);
                continue;
            case 'compact-short':
            case 'K':
                result.notation = 'compact';
                result.compactDisplay = 'short';
                continue;
            case 'compact-long':
            case 'KK':
                result.notation = 'compact';
                result.compactDisplay = 'long';
                continue;
            case 'scientific':
                result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));
                continue;
            case 'engineering':
                result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));
                continue;
            case 'notation-simple':
                result.notation = 'standard';
                continue;
            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
            case 'unit-width-narrow':
                result.currencyDisplay = 'narrowSymbol';
                result.unitDisplay = 'narrow';
                continue;
            case 'unit-width-short':
                result.currencyDisplay = 'code';
                result.unitDisplay = 'short';
                continue;
            case 'unit-width-full-name':
                result.currencyDisplay = 'name';
                result.unitDisplay = 'long';
                continue;
            case 'unit-width-iso-code':
                result.currencyDisplay = 'symbol';
                continue;
            case 'scale':
                result.scale = parseFloat(token.options[0]);
                continue;
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            case 'integer-width':
                if (token.options.length > 1) {
                    throw new RangeError('integer-width stems only accept a single optional option');
                }
                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {
                    if (g1) {
                        result.minimumIntegerDigits = g2.length;
                    }
                    else if (g3 && g4) {
                        throw new Error('We currently do not support maximum integer digits');
                    }
                    else if (g5) {
                        throw new Error('We currently do not support exact integer digits');
                    }
                    return '';
                });
                continue;
        }
        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
            result.minimumIntegerDigits = token.stem.length;
            continue;
        }
        if (FRACTION_PRECISION_REGEX.test(token.stem)) {
            // Precision
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
            // precision-integer case
            if (token.options.length > 1) {
                throw new RangeError('Fraction-precision stems only accept a single optional option');
            }
            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {
                // .000* case (before ICU67 it was .000+)
                if (g2 === '*') {
                    result.minimumFractionDigits = g1.length;
                }
                // .### case
                else if (g3 && g3[0] === '#') {
                    result.maximumFractionDigits = g3.length;
                }
                // .00## case
                else if (g4 && g5) {
                    result.minimumFractionDigits = g4.length;
                    result.maximumFractionDigits = g4.length + g5.length;
                }
                else {
                    result.minimumFractionDigits = g1.length;
                    result.maximumFractionDigits = g1.length;
                }
                return '';
            });
            var opt = token.options[0];
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display
            if (opt === 'w') {
                result = __assign(__assign({}, result), { trailingZeroDisplay: 'stripIfInteger' });
            }
            else if (opt) {
                result = __assign(__assign({}, result), parseSignificantPrecision(opt));
            }
            continue;
        }
        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
            continue;
        }
        var signOpts = parseSign(token.stem);
        if (signOpts) {
            result = __assign(__assign({}, result), signOpts);
        }
        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
        if (conciseScientificAndEngineeringOpts) {
            result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
        }
    }
    return result;
}

// @generated from time-data-gen.ts
// prettier-ignore  
var timeData = {
    "AX": [
        "H"
    ],
    "BQ": [
        "H"
    ],
    "CP": [
        "H"
    ],
    "CZ": [
        "H"
    ],
    "DK": [
        "H"
    ],
    "FI": [
        "H"
    ],
    "ID": [
        "H"
    ],
    "IS": [
        "H"
    ],
    "ML": [
        "H"
    ],
    "NE": [
        "H"
    ],
    "RU": [
        "H"
    ],
    "SE": [
        "H"
    ],
    "SJ": [
        "H"
    ],
    "SK": [
        "H"
    ],
    "AS": [
        "h",
        "H"
    ],
    "BT": [
        "h",
        "H"
    ],
    "DJ": [
        "h",
        "H"
    ],
    "ER": [
        "h",
        "H"
    ],
    "GH": [
        "h",
        "H"
    ],
    "IN": [
        "h",
        "H"
    ],
    "LS": [
        "h",
        "H"
    ],
    "PG": [
        "h",
        "H"
    ],
    "PW": [
        "h",
        "H"
    ],
    "SO": [
        "h",
        "H"
    ],
    "TO": [
        "h",
        "H"
    ],
    "VU": [
        "h",
        "H"
    ],
    "WS": [
        "h",
        "H"
    ],
    "001": [
        "H",
        "h"
    ],
    "AL": [
        "h",
        "H",
        "hB"
    ],
    "TD": [
        "h",
        "H",
        "hB"
    ],
    "ca-ES": [
        "H",
        "h",
        "hB"
    ],
    "CF": [
        "H",
        "h",
        "hB"
    ],
    "CM": [
        "H",
        "h",
        "hB"
    ],
    "fr-CA": [
        "H",
        "h",
        "hB"
    ],
    "gl-ES": [
        "H",
        "h",
        "hB"
    ],
    "it-CH": [
        "H",
        "h",
        "hB"
    ],
    "it-IT": [
        "H",
        "h",
        "hB"
    ],
    "LU": [
        "H",
        "h",
        "hB"
    ],
    "NP": [
        "H",
        "h",
        "hB"
    ],
    "PF": [
        "H",
        "h",
        "hB"
    ],
    "SC": [
        "H",
        "h",
        "hB"
    ],
    "SM": [
        "H",
        "h",
        "hB"
    ],
    "SN": [
        "H",
        "h",
        "hB"
    ],
    "TF": [
        "H",
        "h",
        "hB"
    ],
    "VA": [
        "H",
        "h",
        "hB"
    ],
    "CY": [
        "h",
        "H",
        "hb",
        "hB"
    ],
    "GR": [
        "h",
        "H",
        "hb",
        "hB"
    ],
    "CO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "DO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "KP": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "KR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "NA": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PA": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "VE": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "AC": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "AI": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "BW": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "BZ": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CC": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CX": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "DG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "FK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GB": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GI": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IE": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IM": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IO": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "JE": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "LT": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MN": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MS": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NF": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NR": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NU": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "PN": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "SH": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "SX": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "TA": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "ZA": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "af-ZA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "AR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CL": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CU": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "EA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-BO": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-BR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-EC": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-ES": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-GQ": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-PE": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "GT": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "HN": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "IC": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "KG": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "KM": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "LK": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "MA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "MX": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "NI": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "PY": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "SV": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "UY": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "JP": [
        "H",
        "h",
        "K"
    ],
    "AD": [
        "H",
        "hB"
    ],
    "AM": [
        "H",
        "hB"
    ],
    "AO": [
        "H",
        "hB"
    ],
    "AT": [
        "H",
        "hB"
    ],
    "AW": [
        "H",
        "hB"
    ],
    "BE": [
        "H",
        "hB"
    ],
    "BF": [
        "H",
        "hB"
    ],
    "BJ": [
        "H",
        "hB"
    ],
    "BL": [
        "H",
        "hB"
    ],
    "BR": [
        "H",
        "hB"
    ],
    "CG": [
        "H",
        "hB"
    ],
    "CI": [
        "H",
        "hB"
    ],
    "CV": [
        "H",
        "hB"
    ],
    "DE": [
        "H",
        "hB"
    ],
    "EE": [
        "H",
        "hB"
    ],
    "FR": [
        "H",
        "hB"
    ],
    "GA": [
        "H",
        "hB"
    ],
    "GF": [
        "H",
        "hB"
    ],
    "GN": [
        "H",
        "hB"
    ],
    "GP": [
        "H",
        "hB"
    ],
    "GW": [
        "H",
        "hB"
    ],
    "HR": [
        "H",
        "hB"
    ],
    "IL": [
        "H",
        "hB"
    ],
    "IT": [
        "H",
        "hB"
    ],
    "KZ": [
        "H",
        "hB"
    ],
    "MC": [
        "H",
        "hB"
    ],
    "MD": [
        "H",
        "hB"
    ],
    "MF": [
        "H",
        "hB"
    ],
    "MQ": [
        "H",
        "hB"
    ],
    "MZ": [
        "H",
        "hB"
    ],
    "NC": [
        "H",
        "hB"
    ],
    "NL": [
        "H",
        "hB"
    ],
    "PM": [
        "H",
        "hB"
    ],
    "PT": [
        "H",
        "hB"
    ],
    "RE": [
        "H",
        "hB"
    ],
    "RO": [
        "H",
        "hB"
    ],
    "SI": [
        "H",
        "hB"
    ],
    "SR": [
        "H",
        "hB"
    ],
    "ST": [
        "H",
        "hB"
    ],
    "TG": [
        "H",
        "hB"
    ],
    "TR": [
        "H",
        "hB"
    ],
    "WF": [
        "H",
        "hB"
    ],
    "YT": [
        "H",
        "hB"
    ],
    "BD": [
        "h",
        "hB",
        "H"
    ],
    "PK": [
        "h",
        "hB",
        "H"
    ],
    "AZ": [
        "H",
        "hB",
        "h"
    ],
    "BA": [
        "H",
        "hB",
        "h"
    ],
    "BG": [
        "H",
        "hB",
        "h"
    ],
    "CH": [
        "H",
        "hB",
        "h"
    ],
    "GE": [
        "H",
        "hB",
        "h"
    ],
    "LI": [
        "H",
        "hB",
        "h"
    ],
    "ME": [
        "H",
        "hB",
        "h"
    ],
    "RS": [
        "H",
        "hB",
        "h"
    ],
    "UA": [
        "H",
        "hB",
        "h"
    ],
    "UZ": [
        "H",
        "hB",
        "h"
    ],
    "XK": [
        "H",
        "hB",
        "h"
    ],
    "AG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "AU": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BB": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BS": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "CA": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "DM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "en-001": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "FJ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "FM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GD": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GU": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "JM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KI": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KN": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "LC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "LR": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MH": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MP": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MW": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "NZ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SB": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SL": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SS": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SZ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TT": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "UM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "US": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VI": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "ZM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BO": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "EC": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "ES": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "GQ": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "PE": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "AE": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "ar-001": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "BH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "DZ": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "EG": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "EH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "HK": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "IQ": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "JO": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "KW": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "LB": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "LY": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MO": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MR": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "OM": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PS": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "QA": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SA": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SD": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SY": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "TN": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "YE": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "AF": [
        "H",
        "hb",
        "hB",
        "h"
    ],
    "LA": [
        "H",
        "hb",
        "hB",
        "h"
    ],
    "CN": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "LV": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "TL": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "zu-ZA": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "CD": [
        "hB",
        "H"
    ],
    "IR": [
        "hB",
        "H"
    ],
    "hi-IN": [
        "hB",
        "h",
        "H"
    ],
    "kn-IN": [
        "hB",
        "h",
        "H"
    ],
    "ml-IN": [
        "hB",
        "h",
        "H"
    ],
    "te-IN": [
        "hB",
        "h",
        "H"
    ],
    "KH": [
        "hB",
        "h",
        "H",
        "hb"
    ],
    "ta-IN": [
        "hB",
        "h",
        "hb",
        "H"
    ],
    "BN": [
        "hb",
        "hB",
        "h",
        "H"
    ],
    "MY": [
        "hb",
        "hB",
        "h",
        "H"
    ],
    "ET": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "gu-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "mr-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "pa-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "TW": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "KE": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "MM": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "TZ": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "UG": [
        "hB",
        "hb",
        "H",
        "h"
    ]
};

/**
 * Returns the best matching date time pattern if a date time skeleton
 * pattern is provided with a locale. Follows the Unicode specification:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns
 * @param skeleton date time skeleton pattern that possibly includes j, J or C
 * @param locale
 */
function getBestPattern(skeleton, locale) {
    var skeletonCopy = '';
    for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
        var patternChar = skeleton.charAt(patternPos);
        if (patternChar === 'j') {
            var extraLength = 0;
            while (patternPos + 1 < skeleton.length &&
                skeleton.charAt(patternPos + 1) === patternChar) {
                extraLength++;
                patternPos++;
            }
            var hourLen = 1 + (extraLength & 1);
            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
            var dayPeriodChar = 'a';
            var hourChar = getDefaultHourSymbolFromLocale(locale);
            if (hourChar == 'H' || hourChar == 'k') {
                dayPeriodLen = 0;
            }
            while (dayPeriodLen-- > 0) {
                skeletonCopy += dayPeriodChar;
            }
            while (hourLen-- > 0) {
                skeletonCopy = hourChar + skeletonCopy;
            }
        }
        else if (patternChar === 'J') {
            skeletonCopy += 'H';
        }
        else {
            skeletonCopy += patternChar;
        }
    }
    return skeletonCopy;
}
/**
 * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)
 * of the given `locale` to the corresponding time pattern.
 * @param locale
 */
function getDefaultHourSymbolFromLocale(locale) {
    var hourCycle = locale.hourCycle;
    if (hourCycle === undefined &&
        // @ts-ignore hourCycle(s) is not identified yet
        locale.hourCycles &&
        // @ts-ignore
        locale.hourCycles.length) {
        // @ts-ignore
        hourCycle = locale.hourCycles[0];
    }
    if (hourCycle) {
        switch (hourCycle) {
            case 'h24':
                return 'k';
            case 'h23':
                return 'H';
            case 'h12':
                return 'h';
            case 'h11':
                return 'K';
            default:
                throw new Error('Invalid hourCycle');
        }
    }
    // TODO: Once hourCycle is fully supported remove the following with data generation
    var languageTag = locale.language;
    var regionTag;
    if (languageTag !== 'root') {
        regionTag = locale.maximize().region;
    }
    var hourCycles = timeData[regionTag || ''] ||
        timeData[languageTag || ''] ||
        timeData["".concat(languageTag, "-001")] ||
        timeData['001'];
    return hourCycles[0];
}

var _a$1;
var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
function createLocation(start, end) {
    return { start: start, end: end };
}
// #region Ponyfills
// Consolidate these variables up top for easier toggling during debugging
var hasNativeStartsWith = !!String.prototype.startsWith;
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger
    ? Number.isSafeInteger
    : function (n) {
        return (typeof n === 'number' &&
            isFinite(n) &&
            Math.floor(n) === n &&
            Math.abs(n) <= 0x1fffffffffffff);
    };
// IE11 does not support y and u.
var REGEX_SUPPORTS_U_AND_Y = true;
try {
    var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
    /**
     * legacy Edge or Xbox One browser
     * Unicode flag support: supported
     * Pattern_Syntax support: not supported
     * See https://github.com/formatjs/formatjs/issues/2822
     */
    REGEX_SUPPORTS_U_AND_Y = ((_a$1 = re.exec('a')) === null || _a$1 === void 0 ? void 0 : _a$1[0]) === 'a';
}
catch (_) {
    REGEX_SUPPORTS_U_AND_Y = false;
}
var startsWith = hasNativeStartsWith
    ? // Native
        function startsWith(s, search, position) {
            return s.startsWith(search, position);
        }
    : // For IE11
        function startsWith(s, search, position) {
            return s.slice(position, position + search.length) === search;
        };
var fromCodePoint = hasNativeFromCodePoint
    ? String.fromCodePoint
    : // IE11
        function fromCodePoint() {
            var codePoints = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                codePoints[_i] = arguments[_i];
            }
            var elements = '';
            var length = codePoints.length;
            var i = 0;
            var code;
            while (length > i) {
                code = codePoints[i++];
                if (code > 0x10ffff)
                    throw RangeError(code + ' is not a valid code point');
                elements +=
                    code < 0x10000
                        ? String.fromCharCode(code)
                        : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, (code % 0x400) + 0xdc00);
            }
            return elements;
        };
var fromEntries = 
// native
hasNativeFromEntries
    ? Object.fromEntries
    : // Ponyfill
        function fromEntries(entries) {
            var obj = {};
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                var _a = entries_1[_i], k = _a[0], v = _a[1];
                obj[k] = v;
            }
            return obj;
        };
var codePointAt = hasNativeCodePointAt
    ? // Native
        function codePointAt(s, index) {
            return s.codePointAt(index);
        }
    : // IE 11
        function codePointAt(s, index) {
            var size = s.length;
            if (index < 0 || index >= size) {
                return undefined;
            }
            var first = s.charCodeAt(index);
            var second;
            return first < 0xd800 ||
                first > 0xdbff ||
                index + 1 === size ||
                (second = s.charCodeAt(index + 1)) < 0xdc00 ||
                second > 0xdfff
                ? first
                : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
        };
var trimStart = hasTrimStart
    ? // Native
        function trimStart(s) {
            return s.trimStart();
        }
    : // Ponyfill
        function trimStart(s) {
            return s.replace(SPACE_SEPARATOR_START_REGEX, '');
        };
var trimEnd = hasTrimEnd
    ? // Native
        function trimEnd(s) {
            return s.trimEnd();
        }
    : // Ponyfill
        function trimEnd(s) {
            return s.replace(SPACE_SEPARATOR_END_REGEX, '');
        };
// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
function RE(s, flag) {
    return new RegExp(s, flag);
}
// #endregion
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
    // Native
    var IDENTIFIER_PREFIX_RE_1 = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
        var _a;
        IDENTIFIER_PREFIX_RE_1.lastIndex = index;
        var match = IDENTIFIER_PREFIX_RE_1.exec(s);
        return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
    };
}
else {
    // IE11
    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
        var match = [];
        while (true) {
            var c = codePointAt(s, index);
            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
                break;
            }
            match.push(c);
            index += c >= 0x10000 ? 2 : 1;
        }
        return fromCodePoint.apply(void 0, match);
    };
}
var Parser = /** @class */ (function () {
    function Parser(message, options) {
        if (options === void 0) { options = {}; }
        this.message = message;
        this.position = { offset: 0, line: 1, column: 1 };
        this.ignoreTag = !!options.ignoreTag;
        this.locale = options.locale;
        this.requiresOtherClause = !!options.requiresOtherClause;
        this.shouldParseSkeletons = !!options.shouldParseSkeletons;
    }
    Parser.prototype.parse = function () {
        if (this.offset() !== 0) {
            throw Error('parser can only be used once');
        }
        return this.parseMessage(0, '', false);
    };
    Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {
        var elements = [];
        while (!this.isEOF()) {
            var char = this.char();
            if (char === 123 /* `{` */) {
                var result = this.parseArgument(nestingLevel, expectingCloseTag);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
            else if (char === 125 /* `}` */ && nestingLevel > 0) {
                break;
            }
            else if (char === 35 /* `#` */ &&
                (parentArgType === 'plural' || parentArgType === 'selectordinal')) {
                var position = this.clonePosition();
                this.bump();
                elements.push({
                    type: TYPE.pound,
                    location: createLocation(position, this.clonePosition()),
                });
            }
            else if (char === 60 /* `<` */ &&
                !this.ignoreTag &&
                this.peek() === 47 // char code for '/'
            ) {
                if (expectingCloseTag) {
                    break;
                }
                else {
                    return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
                }
            }
            else if (char === 60 /* `<` */ &&
                !this.ignoreTag &&
                _isAlpha(this.peek() || 0)) {
                var result = this.parseTag(nestingLevel, parentArgType);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
            else {
                var result = this.parseLiteral(nestingLevel, parentArgType);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
        }
        return { val: elements, err: null };
    };
    /**
     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
     * are accepted:
     *
     * ```
     * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
     * tagName ::= [a-z] (PENChar)*
     * PENChar ::=
     *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
     * ```
     *
     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
     * since other tag-based engines like React allow it
     */
    Parser.prototype.parseTag = function (nestingLevel, parentArgType) {
        var startPosition = this.clonePosition();
        this.bump(); // `<`
        var tagName = this.parseTagName();
        this.bumpSpace();
        if (this.bumpIf('/>')) {
            // Self closing tag
            return {
                val: {
                    type: TYPE.literal,
                    value: "<".concat(tagName, "/>"),
                    location: createLocation(startPosition, this.clonePosition()),
                },
                err: null,
            };
        }
        else if (this.bumpIf('>')) {
            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
            if (childrenResult.err) {
                return childrenResult;
            }
            var children = childrenResult.val;
            // Expecting a close tag
            var endTagStartPosition = this.clonePosition();
            if (this.bumpIf('</')) {
                if (this.isEOF() || !_isAlpha(this.char())) {
                    return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                }
                var closingTagNameStartPosition = this.clonePosition();
                var closingTagName = this.parseTagName();
                if (tagName !== closingTagName) {
                    return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
                }
                this.bumpSpace();
                if (!this.bumpIf('>')) {
                    return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                }
                return {
                    val: {
                        type: TYPE.tag,
                        value: tagName,
                        children: children,
                        location: createLocation(startPosition, this.clonePosition()),
                    },
                    err: null,
                };
            }
            else {
                return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
            }
        }
        else {
            return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
        }
    };
    /**
     * This method assumes that the caller has peeked ahead for the first tag character.
     */
    Parser.prototype.parseTagName = function () {
        var startOffset = this.offset();
        this.bump(); // the first tag name character
        while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
            this.bump();
        }
        return this.message.slice(startOffset, this.offset());
    };
    Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {
        var start = this.clonePosition();
        var value = '';
        while (true) {
            var parseQuoteResult = this.tryParseQuote(parentArgType);
            if (parseQuoteResult) {
                value += parseQuoteResult;
                continue;
            }
            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
            if (parseUnquotedResult) {
                value += parseUnquotedResult;
                continue;
            }
            var parseLeftAngleResult = this.tryParseLeftAngleBracket();
            if (parseLeftAngleResult) {
                value += parseLeftAngleResult;
                continue;
            }
            break;
        }
        var location = createLocation(start, this.clonePosition());
        return {
            val: { type: TYPE.literal, value: value, location: location },
            err: null,
        };
    };
    Parser.prototype.tryParseLeftAngleBracket = function () {
        if (!this.isEOF() &&
            this.char() === 60 /* `<` */ &&
            (this.ignoreTag ||
                // If at the opening tag or closing tag position, bail.
                !_isAlphaOrSlash(this.peek() || 0))) {
            this.bump(); // `<`
            return '<';
        }
        return null;
    };
    /**
     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
     * a character that requires quoting (that is, "only where needed"), and works the same in
     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
     */
    Parser.prototype.tryParseQuote = function (parentArgType) {
        if (this.isEOF() || this.char() !== 39 /* `'` */) {
            return null;
        }
        // Parse escaped char following the apostrophe, or early return if there is no escaped char.
        // Check if is valid escaped character
        switch (this.peek()) {
            case 39 /* `'` */:
                // double quote, should return as a single quote.
                this.bump();
                this.bump();
                return "'";
            // '{', '<', '>', '}'
            case 123:
            case 60:
            case 62:
            case 125:
                break;
            case 35: // '#'
                if (parentArgType === 'plural' || parentArgType === 'selectordinal') {
                    break;
                }
                return null;
            default:
                return null;
        }
        this.bump(); // apostrophe
        var codePoints = [this.char()]; // escaped char
        this.bump();
        // read chars until the optional closing apostrophe is found
        while (!this.isEOF()) {
            var ch = this.char();
            if (ch === 39 /* `'` */) {
                if (this.peek() === 39 /* `'` */) {
                    codePoints.push(39);
                    // Bump one more time because we need to skip 2 characters.
                    this.bump();
                }
                else {
                    // Optional closing apostrophe.
                    this.bump();
                    break;
                }
            }
            else {
                codePoints.push(ch);
            }
            this.bump();
        }
        return fromCodePoint.apply(void 0, codePoints);
    };
    Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {
        if (this.isEOF()) {
            return null;
        }
        var ch = this.char();
        if (ch === 60 /* `<` */ ||
            ch === 123 /* `{` */ ||
            (ch === 35 /* `#` */ &&
                (parentArgType === 'plural' || parentArgType === 'selectordinal')) ||
            (ch === 125 /* `}` */ && nestingLevel > 0)) {
            return null;
        }
        else {
            this.bump();
            return fromCodePoint(ch);
        }
    };
    Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {
        var openingBracePosition = this.clonePosition();
        this.bump(); // `{`
        this.bumpSpace();
        if (this.isEOF()) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        if (this.char() === 125 /* `}` */) {
            this.bump();
            return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        // argument name
        var value = this.parseIdentifierIfPossible().value;
        if (!value) {
            return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        this.bumpSpace();
        if (this.isEOF()) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        switch (this.char()) {
            // Simple argument: `{name}`
            case 125 /* `}` */: {
                this.bump(); // `}`
                return {
                    val: {
                        type: TYPE.argument,
                        // value does not include the opening and closing braces.
                        value: value,
                        location: createLocation(openingBracePosition, this.clonePosition()),
                    },
                    err: null,
                };
            }
            // Argument with options: `{name, format, ...}`
            case 44 /* `,` */: {
                this.bump(); // `,`
                this.bumpSpace();
                if (this.isEOF()) {
                    return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
                }
                return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
            }
            default:
                return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
    };
    /**
     * Advance the parser until the end of the identifier, if it is currently on
     * an identifier character. Return an empty string otherwise.
     */
    Parser.prototype.parseIdentifierIfPossible = function () {
        var startingPosition = this.clonePosition();
        var startOffset = this.offset();
        var value = matchIdentifierAtIndex(this.message, startOffset);
        var endOffset = startOffset + value.length;
        this.bumpTo(endOffset);
        var endPosition = this.clonePosition();
        var location = createLocation(startingPosition, endPosition);
        return { value: value, location: location };
    };
    Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {
        var _a;
        // Parse this range:
        // {name, type, style}
        //        ^---^
        var typeStartPosition = this.clonePosition();
        var argType = this.parseIdentifierIfPossible().value;
        var typeEndPosition = this.clonePosition();
        switch (argType) {
            case '':
                // Expecting a style string number, date, time, plural, selectordinal, or select.
                return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            case 'number':
            case 'date':
            case 'time': {
                // Parse this range:
                // {name, number, style}
                //              ^-------^
                this.bumpSpace();
                var styleAndLocation = null;
                if (this.bumpIf(',')) {
                    this.bumpSpace();
                    var styleStartPosition = this.clonePosition();
                    var result = this.parseSimpleArgStyleIfPossible();
                    if (result.err) {
                        return result;
                    }
                    var style = trimEnd(result.val);
                    if (style.length === 0) {
                        return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                    }
                    var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                    styleAndLocation = { style: style, styleLocation: styleLocation };
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                    return argCloseResult;
                }
                var location_1 = createLocation(openingBracePosition, this.clonePosition());
                // Extract style or skeleton
                if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {
                    // Skeleton starts with `::`.
                    var skeleton = trimStart(styleAndLocation.style.slice(2));
                    if (argType === 'number') {
                        var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                        if (result.err) {
                            return result;
                        }
                        return {
                            val: { type: TYPE.number, value: value, location: location_1, style: result.val },
                            err: null,
                        };
                    }
                    else {
                        if (skeleton.length === 0) {
                            return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                        }
                        var dateTimePattern = skeleton;
                        // Get "best match" pattern only if locale is passed, if not, let it
                        // pass as-is where `parseDateTimeSkeleton()` will throw an error
                        // for unsupported patterns.
                        if (this.locale) {
                            dateTimePattern = getBestPattern(skeleton, this.locale);
                        }
                        var style = {
                            type: SKELETON_TYPE.dateTime,
                            pattern: dateTimePattern,
                            location: styleAndLocation.styleLocation,
                            parsedOptions: this.shouldParseSkeletons
                                ? parseDateTimeSkeleton(dateTimePattern)
                                : {},
                        };
                        var type = argType === 'date' ? TYPE.date : TYPE.time;
                        return {
                            val: { type: type, value: value, location: location_1, style: style },
                            err: null,
                        };
                    }
                }
                // Regular style or no style.
                return {
                    val: {
                        type: argType === 'number'
                            ? TYPE.number
                            : argType === 'date'
                                ? TYPE.date
                                : TYPE.time,
                        value: value,
                        location: location_1,
                        style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null,
                    },
                    err: null,
                };
            }
            case 'plural':
            case 'selectordinal':
            case 'select': {
                // Parse this range:
                // {name, plural, options}
                //              ^---------^
                var typeEndPosition_1 = this.clonePosition();
                this.bumpSpace();
                if (!this.bumpIf(',')) {
                    return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
                }
                this.bumpSpace();
                // Parse offset:
                // {name, plural, offset:1, options}
                //                ^-----^
                //
                // or the first option:
                //
                // {name, plural, one {...} other {...}}
                //                ^--^
                var identifierAndLocation = this.parseIdentifierIfPossible();
                var pluralOffset = 0;
                if (argType !== 'select' && identifierAndLocation.value === 'offset') {
                    if (!this.bumpIf(':')) {
                        return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                    }
                    this.bumpSpace();
                    var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                    if (result.err) {
                        return result;
                    }
                    // Parse another identifier for option parsing
                    this.bumpSpace();
                    identifierAndLocation = this.parseIdentifierIfPossible();
                    pluralOffset = result.val;
                }
                var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
                if (optionsResult.err) {
                    return optionsResult;
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                    return argCloseResult;
                }
                var location_2 = createLocation(openingBracePosition, this.clonePosition());
                if (argType === 'select') {
                    return {
                        val: {
                            type: TYPE.select,
                            value: value,
                            options: fromEntries(optionsResult.val),
                            location: location_2,
                        },
                        err: null,
                    };
                }
                else {
                    return {
                        val: {
                            type: TYPE.plural,
                            value: value,
                            options: fromEntries(optionsResult.val),
                            offset: pluralOffset,
                            pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                            location: location_2,
                        },
                        err: null,
                    };
                }
            }
            default:
                return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
        }
    };
    Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {
        // Parse: {value, number, ::currency/GBP }
        //
        if (this.isEOF() || this.char() !== 125 /* `}` */) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        this.bump(); // `}`
        return { val: true, err: null };
    };
    /**
     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
     */
    Parser.prototype.parseSimpleArgStyleIfPossible = function () {
        var nestedBraces = 0;
        var startPosition = this.clonePosition();
        while (!this.isEOF()) {
            var ch = this.char();
            switch (ch) {
                case 39 /* `'` */: {
                    // Treat apostrophe as quoting but include it in the style part.
                    // Find the end of the quoted literal text.
                    this.bump();
                    var apostrophePosition = this.clonePosition();
                    if (!this.bumpUntil("'")) {
                        return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                    }
                    this.bump();
                    break;
                }
                case 123 /* `{` */: {
                    nestedBraces += 1;
                    this.bump();
                    break;
                }
                case 125 /* `}` */: {
                    if (nestedBraces > 0) {
                        nestedBraces -= 1;
                    }
                    else {
                        return {
                            val: this.message.slice(startPosition.offset, this.offset()),
                            err: null,
                        };
                    }
                    break;
                }
                default:
                    this.bump();
                    break;
            }
        }
        return {
            val: this.message.slice(startPosition.offset, this.offset()),
            err: null,
        };
    };
    Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {
        var tokens = [];
        try {
            tokens = parseNumberSkeletonFromString(skeleton);
        }
        catch (e) {
            return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);
        }
        return {
            val: {
                type: SKELETON_TYPE.number,
                tokens: tokens,
                location: location,
                parsedOptions: this.shouldParseSkeletons
                    ? parseNumberSkeleton(tokens)
                    : {},
            },
            err: null,
        };
    };
    /**
     * @param nesting_level The current nesting level of messages.
     *     This can be positive when parsing message fragment in select or plural argument options.
     * @param parent_arg_type The parent argument's type.
     * @param parsed_first_identifier If provided, this is the first identifier-like selector of
     *     the argument. It is a by-product of a previous parsing attempt.
     * @param expecting_close_tag If true, this message is directly or indirectly nested inside
     *     between a pair of opening and closing tags. The nested message will not parse beyond
     *     the closing tag boundary.
     */
    Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
        var _a;
        var hasOtherClause = false;
        var options = [];
        var parsedSelectors = new Set();
        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
        // Parse:
        // one {one apple}
        // ^--^
        while (true) {
            if (selector.length === 0) {
                var startPosition = this.clonePosition();
                if (parentArgType !== 'select' && this.bumpIf('=')) {
                    // Try parse `={number}` selector
                    var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                    if (result.err) {
                        return result;
                    }
                    selectorLocation = createLocation(startPosition, this.clonePosition());
                    selector = this.message.slice(startPosition.offset, this.offset());
                }
                else {
                    break;
                }
            }
            // Duplicate selector clauses
            if (parsedSelectors.has(selector)) {
                return this.error(parentArgType === 'select'
                    ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR
                    : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
            }
            if (selector === 'other') {
                hasOtherClause = true;
            }
            // Parse:
            // one {one apple}
            //     ^----------^
            this.bumpSpace();
            var openingBracePosition = this.clonePosition();
            if (!this.bumpIf('{')) {
                return this.error(parentArgType === 'select'
                    ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT
                    : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
            }
            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
            if (fragmentResult.err) {
                return fragmentResult;
            }
            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) {
                return argCloseResult;
            }
            options.push([
                selector,
                {
                    value: fragmentResult.val,
                    location: createLocation(openingBracePosition, this.clonePosition()),
                },
            ]);
            // Keep track of the existing selectors
            parsedSelectors.add(selector);
            // Prep next selector clause.
            this.bumpSpace();
            (_a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location);
        }
        if (options.length === 0) {
            return this.error(parentArgType === 'select'
                ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR
                : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
        }
        if (this.requiresOtherClause && !hasOtherClause) {
            return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
        }
        return { val: options, err: null };
    };
    Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {
        var sign = 1;
        var startingPosition = this.clonePosition();
        if (this.bumpIf('+')) ;
        else if (this.bumpIf('-')) {
            sign = -1;
        }
        var hasDigits = false;
        var decimal = 0;
        while (!this.isEOF()) {
            var ch = this.char();
            if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {
                hasDigits = true;
                decimal = decimal * 10 + (ch - 48);
                this.bump();
            }
            else {
                break;
            }
        }
        var location = createLocation(startingPosition, this.clonePosition());
        if (!hasDigits) {
            return this.error(expectNumberError, location);
        }
        decimal *= sign;
        if (!isSafeInteger(decimal)) {
            return this.error(invalidNumberError, location);
        }
        return { val: decimal, err: null };
    };
    Parser.prototype.offset = function () {
        return this.position.offset;
    };
    Parser.prototype.isEOF = function () {
        return this.offset() === this.message.length;
    };
    Parser.prototype.clonePosition = function () {
        // This is much faster than `Object.assign` or spread.
        return {
            offset: this.position.offset,
            line: this.position.line,
            column: this.position.column,
        };
    };
    /**
     * Return the code point at the current position of the parser.
     * Throws if the index is out of bound.
     */
    Parser.prototype.char = function () {
        var offset = this.position.offset;
        if (offset >= this.message.length) {
            throw Error('out of bound');
        }
        var code = codePointAt(this.message, offset);
        if (code === undefined) {
            throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
        }
        return code;
    };
    Parser.prototype.error = function (kind, location) {
        return {
            val: null,
            err: {
                kind: kind,
                message: this.message,
                location: location,
            },
        };
    };
    /** Bump the parser to the next UTF-16 code unit. */
    Parser.prototype.bump = function () {
        if (this.isEOF()) {
            return;
        }
        var code = this.char();
        if (code === 10 /* '\n' */) {
            this.position.line += 1;
            this.position.column = 1;
            this.position.offset += 1;
        }
        else {
            this.position.column += 1;
            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
            this.position.offset += code < 0x10000 ? 1 : 2;
        }
    };
    /**
     * If the substring starting at the current position of the parser has
     * the given prefix, then bump the parser to the character immediately
     * following the prefix and return true. Otherwise, don't bump the parser
     * and return false.
     */
    Parser.prototype.bumpIf = function (prefix) {
        if (startsWith(this.message, prefix, this.offset())) {
            for (var i = 0; i < prefix.length; i++) {
                this.bump();
            }
            return true;
        }
        return false;
    };
    /**
     * Bump the parser until the pattern character is found and return `true`.
     * Otherwise bump to the end of the file and return `false`.
     */
    Parser.prototype.bumpUntil = function (pattern) {
        var currentOffset = this.offset();
        var index = this.message.indexOf(pattern, currentOffset);
        if (index >= 0) {
            this.bumpTo(index);
            return true;
        }
        else {
            this.bumpTo(this.message.length);
            return false;
        }
    };
    /**
     * Bump the parser to the target offset.
     * If target offset is beyond the end of the input, bump the parser to the end of the input.
     */
    Parser.prototype.bumpTo = function (targetOffset) {
        if (this.offset() > targetOffset) {
            throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
        }
        targetOffset = Math.min(targetOffset, this.message.length);
        while (true) {
            var offset = this.offset();
            if (offset === targetOffset) {
                break;
            }
            if (offset > targetOffset) {
                throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
            }
            this.bump();
            if (this.isEOF()) {
                break;
            }
        }
    };
    /** advance the parser through all whitespace to the next non-whitespace code unit. */
    Parser.prototype.bumpSpace = function () {
        while (!this.isEOF() && _isWhiteSpace(this.char())) {
            this.bump();
        }
    };
    /**
     * Peek at the *next* Unicode codepoint in the input without advancing the parser.
     * If the input has been exhausted, then this returns null.
     */
    Parser.prototype.peek = function () {
        if (this.isEOF()) {
            return null;
        }
        var code = this.char();
        var offset = this.offset();
        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));
        return nextCode !== null && nextCode !== void 0 ? nextCode : null;
    };
    return Parser;
}());
/**
 * This check if codepoint is alphabet (lower & uppercase)
 * @param codepoint
 * @returns
 */
function _isAlpha(codepoint) {
    return ((codepoint >= 97 && codepoint <= 122) ||
        (codepoint >= 65 && codepoint <= 90));
}
function _isAlphaOrSlash(codepoint) {
    return _isAlpha(codepoint) || codepoint === 47; /* '/' */
}
/** See `parseTag` function docs. */
function _isPotentialElementNameChar(c) {
    return (c === 45 /* '-' */ ||
        c === 46 /* '.' */ ||
        (c >= 48 && c <= 57) /* 0..9 */ ||
        c === 95 /* '_' */ ||
        (c >= 97 && c <= 122) /** a..z */ ||
        (c >= 65 && c <= 90) /* A..Z */ ||
        c == 0xb7 ||
        (c >= 0xc0 && c <= 0xd6) ||
        (c >= 0xd8 && c <= 0xf6) ||
        (c >= 0xf8 && c <= 0x37d) ||
        (c >= 0x37f && c <= 0x1fff) ||
        (c >= 0x200c && c <= 0x200d) ||
        (c >= 0x203f && c <= 0x2040) ||
        (c >= 0x2070 && c <= 0x218f) ||
        (c >= 0x2c00 && c <= 0x2fef) ||
        (c >= 0x3001 && c <= 0xd7ff) ||
        (c >= 0xf900 && c <= 0xfdcf) ||
        (c >= 0xfdf0 && c <= 0xfffd) ||
        (c >= 0x10000 && c <= 0xeffff));
}
/**
 * Code point equivalent of regex `\p{White_Space}`.
 * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */
function _isWhiteSpace(c) {
    return ((c >= 0x0009 && c <= 0x000d) ||
        c === 0x0020 ||
        c === 0x0085 ||
        (c >= 0x200e && c <= 0x200f) ||
        c === 0x2028 ||
        c === 0x2029);
}
/**
 * Code point equivalent of regex `\p{Pattern_Syntax}`.
 * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */
function _isPatternSyntax(c) {
    return ((c >= 0x0021 && c <= 0x0023) ||
        c === 0x0024 ||
        (c >= 0x0025 && c <= 0x0027) ||
        c === 0x0028 ||
        c === 0x0029 ||
        c === 0x002a ||
        c === 0x002b ||
        c === 0x002c ||
        c === 0x002d ||
        (c >= 0x002e && c <= 0x002f) ||
        (c >= 0x003a && c <= 0x003b) ||
        (c >= 0x003c && c <= 0x003e) ||
        (c >= 0x003f && c <= 0x0040) ||
        c === 0x005b ||
        c === 0x005c ||
        c === 0x005d ||
        c === 0x005e ||
        c === 0x0060 ||
        c === 0x007b ||
        c === 0x007c ||
        c === 0x007d ||
        c === 0x007e ||
        c === 0x00a1 ||
        (c >= 0x00a2 && c <= 0x00a5) ||
        c === 0x00a6 ||
        c === 0x00a7 ||
        c === 0x00a9 ||
        c === 0x00ab ||
        c === 0x00ac ||
        c === 0x00ae ||
        c === 0x00b0 ||
        c === 0x00b1 ||
        c === 0x00b6 ||
        c === 0x00bb ||
        c === 0x00bf ||
        c === 0x00d7 ||
        c === 0x00f7 ||
        (c >= 0x2010 && c <= 0x2015) ||
        (c >= 0x2016 && c <= 0x2017) ||
        c === 0x2018 ||
        c === 0x2019 ||
        c === 0x201a ||
        (c >= 0x201b && c <= 0x201c) ||
        c === 0x201d ||
        c === 0x201e ||
        c === 0x201f ||
        (c >= 0x2020 && c <= 0x2027) ||
        (c >= 0x2030 && c <= 0x2038) ||
        c === 0x2039 ||
        c === 0x203a ||
        (c >= 0x203b && c <= 0x203e) ||
        (c >= 0x2041 && c <= 0x2043) ||
        c === 0x2044 ||
        c === 0x2045 ||
        c === 0x2046 ||
        (c >= 0x2047 && c <= 0x2051) ||
        c === 0x2052 ||
        c === 0x2053 ||
        (c >= 0x2055 && c <= 0x205e) ||
        (c >= 0x2190 && c <= 0x2194) ||
        (c >= 0x2195 && c <= 0x2199) ||
        (c >= 0x219a && c <= 0x219b) ||
        (c >= 0x219c && c <= 0x219f) ||
        c === 0x21a0 ||
        (c >= 0x21a1 && c <= 0x21a2) ||
        c === 0x21a3 ||
        (c >= 0x21a4 && c <= 0x21a5) ||
        c === 0x21a6 ||
        (c >= 0x21a7 && c <= 0x21ad) ||
        c === 0x21ae ||
        (c >= 0x21af && c <= 0x21cd) ||
        (c >= 0x21ce && c <= 0x21cf) ||
        (c >= 0x21d0 && c <= 0x21d1) ||
        c === 0x21d2 ||
        c === 0x21d3 ||
        c === 0x21d4 ||
        (c >= 0x21d5 && c <= 0x21f3) ||
        (c >= 0x21f4 && c <= 0x22ff) ||
        (c >= 0x2300 && c <= 0x2307) ||
        c === 0x2308 ||
        c === 0x2309 ||
        c === 0x230a ||
        c === 0x230b ||
        (c >= 0x230c && c <= 0x231f) ||
        (c >= 0x2320 && c <= 0x2321) ||
        (c >= 0x2322 && c <= 0x2328) ||
        c === 0x2329 ||
        c === 0x232a ||
        (c >= 0x232b && c <= 0x237b) ||
        c === 0x237c ||
        (c >= 0x237d && c <= 0x239a) ||
        (c >= 0x239b && c <= 0x23b3) ||
        (c >= 0x23b4 && c <= 0x23db) ||
        (c >= 0x23dc && c <= 0x23e1) ||
        (c >= 0x23e2 && c <= 0x2426) ||
        (c >= 0x2427 && c <= 0x243f) ||
        (c >= 0x2440 && c <= 0x244a) ||
        (c >= 0x244b && c <= 0x245f) ||
        (c >= 0x2500 && c <= 0x25b6) ||
        c === 0x25b7 ||
        (c >= 0x25b8 && c <= 0x25c0) ||
        c === 0x25c1 ||
        (c >= 0x25c2 && c <= 0x25f7) ||
        (c >= 0x25f8 && c <= 0x25ff) ||
        (c >= 0x2600 && c <= 0x266e) ||
        c === 0x266f ||
        (c >= 0x2670 && c <= 0x2767) ||
        c === 0x2768 ||
        c === 0x2769 ||
        c === 0x276a ||
        c === 0x276b ||
        c === 0x276c ||
        c === 0x276d ||
        c === 0x276e ||
        c === 0x276f ||
        c === 0x2770 ||
        c === 0x2771 ||
        c === 0x2772 ||
        c === 0x2773 ||
        c === 0x2774 ||
        c === 0x2775 ||
        (c >= 0x2794 && c <= 0x27bf) ||
        (c >= 0x27c0 && c <= 0x27c4) ||
        c === 0x27c5 ||
        c === 0x27c6 ||
        (c >= 0x27c7 && c <= 0x27e5) ||
        c === 0x27e6 ||
        c === 0x27e7 ||
        c === 0x27e8 ||
        c === 0x27e9 ||
        c === 0x27ea ||
        c === 0x27eb ||
        c === 0x27ec ||
        c === 0x27ed ||
        c === 0x27ee ||
        c === 0x27ef ||
        (c >= 0x27f0 && c <= 0x27ff) ||
        (c >= 0x2800 && c <= 0x28ff) ||
        (c >= 0x2900 && c <= 0x2982) ||
        c === 0x2983 ||
        c === 0x2984 ||
        c === 0x2985 ||
        c === 0x2986 ||
        c === 0x2987 ||
        c === 0x2988 ||
        c === 0x2989 ||
        c === 0x298a ||
        c === 0x298b ||
        c === 0x298c ||
        c === 0x298d ||
        c === 0x298e ||
        c === 0x298f ||
        c === 0x2990 ||
        c === 0x2991 ||
        c === 0x2992 ||
        c === 0x2993 ||
        c === 0x2994 ||
        c === 0x2995 ||
        c === 0x2996 ||
        c === 0x2997 ||
        c === 0x2998 ||
        (c >= 0x2999 && c <= 0x29d7) ||
        c === 0x29d8 ||
        c === 0x29d9 ||
        c === 0x29da ||
        c === 0x29db ||
        (c >= 0x29dc && c <= 0x29fb) ||
        c === 0x29fc ||
        c === 0x29fd ||
        (c >= 0x29fe && c <= 0x2aff) ||
        (c >= 0x2b00 && c <= 0x2b2f) ||
        (c >= 0x2b30 && c <= 0x2b44) ||
        (c >= 0x2b45 && c <= 0x2b46) ||
        (c >= 0x2b47 && c <= 0x2b4c) ||
        (c >= 0x2b4d && c <= 0x2b73) ||
        (c >= 0x2b74 && c <= 0x2b75) ||
        (c >= 0x2b76 && c <= 0x2b95) ||
        c === 0x2b96 ||
        (c >= 0x2b97 && c <= 0x2bff) ||
        (c >= 0x2e00 && c <= 0x2e01) ||
        c === 0x2e02 ||
        c === 0x2e03 ||
        c === 0x2e04 ||
        c === 0x2e05 ||
        (c >= 0x2e06 && c <= 0x2e08) ||
        c === 0x2e09 ||
        c === 0x2e0a ||
        c === 0x2e0b ||
        c === 0x2e0c ||
        c === 0x2e0d ||
        (c >= 0x2e0e && c <= 0x2e16) ||
        c === 0x2e17 ||
        (c >= 0x2e18 && c <= 0x2e19) ||
        c === 0x2e1a ||
        c === 0x2e1b ||
        c === 0x2e1c ||
        c === 0x2e1d ||
        (c >= 0x2e1e && c <= 0x2e1f) ||
        c === 0x2e20 ||
        c === 0x2e21 ||
        c === 0x2e22 ||
        c === 0x2e23 ||
        c === 0x2e24 ||
        c === 0x2e25 ||
        c === 0x2e26 ||
        c === 0x2e27 ||
        c === 0x2e28 ||
        c === 0x2e29 ||
        (c >= 0x2e2a && c <= 0x2e2e) ||
        c === 0x2e2f ||
        (c >= 0x2e30 && c <= 0x2e39) ||
        (c >= 0x2e3a && c <= 0x2e3b) ||
        (c >= 0x2e3c && c <= 0x2e3f) ||
        c === 0x2e40 ||
        c === 0x2e41 ||
        c === 0x2e42 ||
        (c >= 0x2e43 && c <= 0x2e4f) ||
        (c >= 0x2e50 && c <= 0x2e51) ||
        c === 0x2e52 ||
        (c >= 0x2e53 && c <= 0x2e7f) ||
        (c >= 0x3001 && c <= 0x3003) ||
        c === 0x3008 ||
        c === 0x3009 ||
        c === 0x300a ||
        c === 0x300b ||
        c === 0x300c ||
        c === 0x300d ||
        c === 0x300e ||
        c === 0x300f ||
        c === 0x3010 ||
        c === 0x3011 ||
        (c >= 0x3012 && c <= 0x3013) ||
        c === 0x3014 ||
        c === 0x3015 ||
        c === 0x3016 ||
        c === 0x3017 ||
        c === 0x3018 ||
        c === 0x3019 ||
        c === 0x301a ||
        c === 0x301b ||
        c === 0x301c ||
        c === 0x301d ||
        (c >= 0x301e && c <= 0x301f) ||
        c === 0x3020 ||
        c === 0x3030 ||
        c === 0xfd3e ||
        c === 0xfd3f ||
        (c >= 0xfe45 && c <= 0xfe46));
}

function pruneLocation(els) {
    els.forEach(function (el) {
        delete el.location;
        if (isSelectElement(el) || isPluralElement(el)) {
            for (var k in el.options) {
                delete el.options[k].location;
                pruneLocation(el.options[k].value);
            }
        }
        else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
            delete el.style.location;
        }
        else if ((isDateElement(el) || isTimeElement(el)) &&
            isDateTimeSkeleton(el.style)) {
            delete el.style.location;
        }
        else if (isTagElement(el)) {
            pruneLocation(el.children);
        }
    });
}
function parse(message, opts) {
    if (opts === void 0) { opts = {}; }
    opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
    var result = new Parser(message, opts).parse();
    if (result.err) {
        var error = SyntaxError(ErrorKind[result.err.kind]);
        // @ts-expect-error Assign to error object
        error.location = result.err.location;
        // @ts-expect-error Assign to error object
        error.originalMessage = result.err.message;
        throw error;
    }
    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
        pruneLocation(result.val);
    }
    return result.val;
}

//
// Main
//
function memoize(fn, options) {
    var cache = options && options.cache ? options.cache : cacheDefault;
    var serializer = options && options.serializer ? options.serializer : serializerDefault;
    var strategy = options && options.strategy ? options.strategy : strategyDefault;
    return strategy(fn, {
        cache: cache,
        serializer: serializer,
    });
}
//
// Strategy
//
function isPrimitive(value) {
    return (value == null || typeof value === 'number' || typeof value === 'boolean'); // || typeof value === "string" 'unsafe' primitive for our needs
}
function monadic(fn, cache, serializer, arg) {
    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function variadic(fn, cache, serializer) {
    var args = Array.prototype.slice.call(arguments, 3);
    var cacheKey = serializer(args);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function assemble(fn, context, strategy, cache, serialize) {
    return strategy.bind(context, fn, cache, serialize);
}
function strategyDefault(fn, options) {
    var strategy = fn.length === 1 ? monadic : variadic;
    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
function strategyVariadic(fn, options) {
    return assemble(fn, this, variadic, options.cache.create(), options.serializer);
}
function strategyMonadic(fn, options) {
    return assemble(fn, this, monadic, options.cache.create(), options.serializer);
}
//
// Serializer
//
var serializerDefault = function () {
    return JSON.stringify(arguments);
};
//
// Cache
//
function ObjectWithoutPrototypeCache() {
    this.cache = Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.get = function (key) {
    return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
    this.cache[key] = value;
};
var cacheDefault = {
    create: function create() {
        // @ts-ignore
        return new ObjectWithoutPrototypeCache();
    },
};
var strategies = {
    variadic: strategyVariadic,
    monadic: strategyMonadic,
};

var ErrorCode;
(function (ErrorCode) {
    // When we have a placeholder but no value to format
    ErrorCode["MISSING_VALUE"] = "MISSING_VALUE";
    // When value supplied is invalid
    ErrorCode["INVALID_VALUE"] = "INVALID_VALUE";
    // When we need specific Intl API but it's not available
    ErrorCode["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode || (ErrorCode = {}));
var FormatError = /** @class */ (function (_super) {
    __extends(FormatError, _super);
    function FormatError(msg, code, originalMessage) {
        var _this = _super.call(this, msg) || this;
        _this.code = code;
        _this.originalMessage = originalMessage;
        return _this;
    }
    FormatError.prototype.toString = function () {
        return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
    };
    return FormatError;
}(Error));
var InvalidValueError = /** @class */ (function (_super) {
    __extends(InvalidValueError, _super);
    function InvalidValueError(variableId, value, options, originalMessage) {
        return _super.call(this, "Invalid values for \"".concat(variableId, "\": \"").concat(value, "\". Options are \"").concat(Object.keys(options).join('", "'), "\""), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueError;
}(FormatError));
var InvalidValueTypeError = /** @class */ (function (_super) {
    __extends(InvalidValueTypeError, _super);
    function InvalidValueTypeError(value, type, originalMessage) {
        return _super.call(this, "Value for \"".concat(value, "\" must be of type ").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueTypeError;
}(FormatError));
var MissingValueError = /** @class */ (function (_super) {
    __extends(MissingValueError, _super);
    function MissingValueError(variableId, originalMessage) {
        return _super.call(this, "The intl string context variable \"".concat(variableId, "\" was not provided to the string \"").concat(originalMessage, "\""), ErrorCode.MISSING_VALUE, originalMessage) || this;
    }
    return MissingValueError;
}(FormatError));

var PART_TYPE;
(function (PART_TYPE) {
    PART_TYPE[PART_TYPE["literal"] = 0] = "literal";
    PART_TYPE[PART_TYPE["object"] = 1] = "object";
})(PART_TYPE || (PART_TYPE = {}));
function mergeLiteral(parts) {
    if (parts.length < 2) {
        return parts;
    }
    return parts.reduce(function (all, part) {
        var lastPart = all[all.length - 1];
        if (!lastPart ||
            lastPart.type !== PART_TYPE.literal ||
            part.type !== PART_TYPE.literal) {
            all.push(part);
        }
        else {
            lastPart.value += part.value;
        }
        return all;
    }, []);
}
function isFormatXMLElementFn(el) {
    return typeof el === 'function';
}
// TODO(skeleton): add skeleton support
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, 
// For debugging
originalMessage) {
    // Hot path for straight simple msg translations
    if (els.length === 1 && isLiteralElement(els[0])) {
        return [
            {
                type: PART_TYPE.literal,
                value: els[0].value,
            },
        ];
    }
    var result = [];
    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
        var el = els_1[_i];
        // Exit early for string parts.
        if (isLiteralElement(el)) {
            result.push({
                type: PART_TYPE.literal,
                value: el.value,
            });
            continue;
        }
        // TODO: should this part be literal type?
        // Replace `#` in plural rules with the actual numeric value.
        if (isPoundElement(el)) {
            if (typeof currentPluralValue === 'number') {
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters.getNumberFormat(locales).format(currentPluralValue),
                });
            }
            continue;
        }
        var varName = el.value;
        // Enforce that all required values are provided by the caller.
        if (!(values && varName in values)) {
            throw new MissingValueError(varName, originalMessage);
        }
        var value = values[varName];
        if (isArgumentElement(el)) {
            if (!value || typeof value === 'string' || typeof value === 'number') {
                value =
                    typeof value === 'string' || typeof value === 'number'
                        ? String(value)
                        : '';
            }
            result.push({
                type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                value: value,
            });
            continue;
        }
        // Recursively format plural and select parts' option — which can be a
        // nested pattern structure. The choosing of the option to use is
        // abstracted-by and delegated-to the part helper object.
        if (isDateElement(el)) {
            var style = typeof el.style === 'string'
                ? formats.date[el.style]
                : isDateTimeSkeleton(el.style)
                    ? el.style.parsedOptions
                    : undefined;
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getDateTimeFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if (isTimeElement(el)) {
            var style = typeof el.style === 'string'
                ? formats.time[el.style]
                : isDateTimeSkeleton(el.style)
                    ? el.style.parsedOptions
                    : formats.time.medium;
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getDateTimeFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if (isNumberElement(el)) {
            var style = typeof el.style === 'string'
                ? formats.number[el.style]
                : isNumberSkeleton(el.style)
                    ? el.style.parsedOptions
                    : undefined;
            if (style && style.scale) {
                value =
                    value *
                        (style.scale || 1);
            }
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getNumberFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if (isTagElement(el)) {
            var children = el.children, value_1 = el.value;
            var formatFn = values[value_1];
            if (!isFormatXMLElementFn(formatFn)) {
                throw new InvalidValueTypeError(value_1, 'function', originalMessage);
            }
            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
            var chunks = formatFn(parts.map(function (p) { return p.value; }));
            if (!Array.isArray(chunks)) {
                chunks = [chunks];
            }
            result.push.apply(result, chunks.map(function (c) {
                return {
                    type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                    value: c,
                };
            }));
        }
        if (isSelectElement(el)) {
            var opt = el.options[value] || el.options.other;
            if (!opt) {
                throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
            continue;
        }
        if (isPluralElement(el)) {
            var opt = el.options["=".concat(value)];
            if (!opt) {
                if (!Intl.PluralRules) {
                    throw new FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", ErrorCode.MISSING_INTL_API, originalMessage);
                }
                var rule = formatters
                    .getPluralRules(locales, { type: el.pluralType })
                    .select(value - (el.offset || 0));
                opt = el.options[rule] || el.options.other;
            }
            if (!opt) {
                throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
            continue;
        }
    }
    return mergeLiteral(result);
}

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
// -- MessageFormat --------------------------------------------------------
function mergeConfig(c1, c2) {
    if (!c2) {
        return c1;
    }
    return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {
        all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));
        return all;
    }, {}));
}
function mergeConfigs(defaultConfig, configs) {
    if (!configs) {
        return defaultConfig;
    }
    return Object.keys(defaultConfig).reduce(function (all, k) {
        all[k] = mergeConfig(defaultConfig[k], configs[k]);
        return all;
    }, __assign({}, defaultConfig));
}
function createFastMemoizeCache(store) {
    return {
        create: function () {
            return {
                get: function (key) {
                    return store[key];
                },
                set: function (key, value) {
                    store[key] = value;
                },
            };
        },
    };
}
function createDefaultFormatters(cache) {
    if (cache === void 0) { cache = {
        number: {},
        dateTime: {},
        pluralRules: {},
    }; }
    return {
        getNumberFormat: memoize(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.number),
            strategy: strategies.variadic,
        }),
        getDateTimeFormat: memoize(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.dateTime),
            strategy: strategies.variadic,
        }),
        getPluralRules: memoize(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.pluralRules),
            strategy: strategies.variadic,
        }),
    };
}
var IntlMessageFormat$1 = /** @class */ (function () {
    function IntlMessageFormat(message, locales, overrideFormats, opts) {
        var _this = this;
        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }
        this.formatterCache = {
            number: {},
            dateTime: {},
            pluralRules: {},
        };
        this.format = function (values) {
            var parts = _this.formatToParts(values);
            // Hot path for straight simple msg translations
            if (parts.length === 1) {
                return parts[0].value;
            }
            var result = parts.reduce(function (all, part) {
                if (!all.length ||
                    part.type !== PART_TYPE.literal ||
                    typeof all[all.length - 1] !== 'string') {
                    all.push(part.value);
                }
                else {
                    all[all.length - 1] += part.value;
                }
                return all;
            }, []);
            if (result.length <= 1) {
                return result[0] || '';
            }
            return result;
        };
        this.formatToParts = function (values) {
            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
        };
        this.resolvedOptions = function () { return ({
            locale: _this.resolvedLocale.toString(),
        }); };
        this.getAst = function () { return _this.ast; };
        // Defined first because it's used to build the format pattern.
        this.locales = locales;
        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);
        if (typeof message === 'string') {
            this.message = message;
            if (!IntlMessageFormat.__parse) {
                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
            }
            // Parse string messages into an AST.
            this.ast = IntlMessageFormat.__parse(message, {
                ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
                locale: this.resolvedLocale,
            });
        }
        else {
            this.ast = message;
        }
        if (!Array.isArray(this.ast)) {
            throw new TypeError('A message must be provided as a String or AST.');
        }
        // Creates a new object with the specified `formats` merged with the default
        // formats.
        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
        this.formatters =
            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);
    }
    Object.defineProperty(IntlMessageFormat, "defaultLocale", {
        get: function () {
            if (!IntlMessageFormat.memoizedDefaultLocale) {
                IntlMessageFormat.memoizedDefaultLocale =
                    new Intl.NumberFormat().resolvedOptions().locale;
            }
            return IntlMessageFormat.memoizedDefaultLocale;
        },
        enumerable: false,
        configurable: true
    });
    IntlMessageFormat.memoizedDefaultLocale = null;
    IntlMessageFormat.resolveLocale = function (locales) {
        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
        if (supportedLocales.length > 0) {
            return new Intl.Locale(supportedLocales[0]);
        }
        return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);
    };
    IntlMessageFormat.__parse = parse;
    // Default format options used as the prototype of the `formats` provided to the
    // constructor. These are used when constructing the internal Intl.NumberFormat
    // and Intl.DateTimeFormat instances.
    IntlMessageFormat.formats = {
        number: {
            integer: {
                maximumFractionDigits: 0,
            },
            currency: {
                style: 'currency',
            },
            percent: {
                style: 'percent',
            },
        },
        date: {
            short: {
                month: 'numeric',
                day: 'numeric',
                year: '2-digit',
            },
            medium: {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
            },
            long: {
                month: 'long',
                day: 'numeric',
                year: 'numeric',
            },
            full: {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric',
            },
        },
        time: {
            short: {
                hour: 'numeric',
                minute: 'numeric',
            },
            medium: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
            },
            long: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
            },
            full: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
            },
        },
    };
    return IntlMessageFormat;
}());

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
var IntlMessageFormat = IntlMessageFormat$1;

var _a;
var IcuFormatter = (_a = /** @class */ (function () {
        function class_1() {
            this.locales = new Map();
        }
        class_1.prototype.isLocaleValid = function (locale) {
            try {
                return Boolean(Intl.NumberFormat.supportedLocalesOf(locale).length);
            }
            catch (_a) {
                return false;
            }
        };
        class_1.prototype.getLocale = function (language) {
            if (!this.locales.get(language)) {
                var localeCandidate = String(language).replace(/[^a-zA-Z]/g, '-');
                while (!this.isLocaleValid(localeCandidate)) {
                    localeCandidate =
                        localeCandidate.split('-').slice(0, -1).join('-') || 'en';
                }
                this.locales.set(language, localeCandidate);
            }
            return this.locales.get(language);
        };
        class_1.prototype.format = function (_a) {
            var translation = _a.translation, language = _a.language, params = _a.params;
            var ignoreTag = !Object.values(params).find(function (p) { return typeof p === 'function'; });
            var locale = this.getLocale(language);
            return new IntlMessageFormat(translation, locale, undefined, {
                ignoreTag: ignoreTag,
            }).format(params);
        };
        return class_1;
    }()),
    _a.type = 'formatter',
    _a);

exports.DEVTOOLS_ID = DEVTOOLS_ID;
exports.IcuFormatter = IcuFormatter;
exports.NodeHelper = NodeHelper;
exports.RESTRICTED_ASCENDANT_ATTRIBUTE = RESTRICTED_ASCENDANT_ATTRIBUTE;
exports.TOLGEE_ATTRIBUTE_NAME = TOLGEE_ATTRIBUTE_NAME;
exports.TOLGEE_HIGHLIGHTER_CLASS = TOLGEE_HIGHLIGHTER_CLASS;
exports.TOLGEE_TARGET_ATTRIBUTE = TOLGEE_TARGET_ATTRIBUTE;
exports.TOLGEE_WRAPPED_ONLY_DATA_ATTRIBUTE = TOLGEE_WRAPPED_ONLY_DATA_ATTRIBUTE;
exports.TextHelper = TextHelper;
exports.Tolgee = Tolgee;
exports.TolgeeConfig = TolgeeConfig;
exports.TranslationData = TranslationData;
//# sourceMappingURL=tolgee.cjs.js.map
