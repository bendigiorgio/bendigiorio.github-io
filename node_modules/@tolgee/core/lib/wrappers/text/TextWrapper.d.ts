import { Properties } from '../../Properties';
import { ElementRegistrar } from '../../services/ElementRegistrar';
import { EventService } from '../../services/EventService';
import { TextService } from '../../services/TextService';
import { TranslationParams } from '../../types';
import { AbstractWrapper } from '../AbstractWrapper';
export declare class TextWrapper implements AbstractWrapper {
    private coder;
    private coreHandler;
    private attributeHandler;
    private wrappedHandler;
    private textHandler;
    private nodeHandler;
    constructor(eventService: EventService, properties: Properties, textService: TextService, elementRegistrar: ElementRegistrar);
    handleText(node: Element): Promise<void>;
    handleSubtree(node: Element): Promise<void>;
    handleAttribute(node: Element): Promise<void>;
    wrap(key: string, params: TranslationParams, defaultValue: string | undefined, translation: string): string;
    unwrap(text: string): import("../../types").Unwrapped;
}
