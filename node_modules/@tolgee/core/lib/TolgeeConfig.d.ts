/// <reference types="node" />
import { TreeTranslationsData } from './types';
import { ModifierKey } from './Constants/ModifierKey';
import { Mode } from 'fs';
declare type UiConstructor = new (...args: any[]) => any;
interface UiLibInterface {
    UI: UiConstructor;
}
declare type UiType = UiConstructor | UiLibInterface | Promise<UiConstructor> | Promise<UiLibInterface>;
export declare class TolgeeConfig {
    /**
     * @deprecated This option won't have any effect,
     * because mode is now automatically detected when apiKey + apiUrl are set
     */
    mode?: Mode;
    apiUrl?: string;
    apiKey?: string;
    inputPrefix?: string;
    inputSuffix?: string;
    /**
     * Overrides all language settings
     */
    forceLanguage?: string;
    /**
     * Used when auto detection is not available or is turned off
     */
    defaultLanguage?: string;
    /**
     * Languages which can be used for language detection
     * and also limits which values can be stored
     */
    availableLanguages?: string[];
    /**
     * Language which is used when no translation is available for current one
     */
    fallbackLanguage?: string;
    /**
     * Store user language in localStorage (default: true)
     */
    enableLanguageStore?: boolean;
    /**
     * Use auto language detection by browser locale (default: true)
     */
    enableLanguageDetection?: boolean;
    filesUrlPrefix?: string;
    watch?: boolean;
    ui?: UiType;
    targetElement?: Element;
    tagAttributes?: {
        [key: string]: string[];
    };
    highlightKeys?: ModifierKey[];
    passToParent?: (keyof HTMLElementTagNameMap)[] | ((node: Element) => boolean);
    restrictedElements?: string[];
    highlightColor?: string;
    highlightWidth?: number;
    /** localization data to use in production mode */
    staticData?: {
        [key: string]: TreeTranslationsData | (() => Promise<TreeTranslationsData>);
    };
    wrapperMode?: 'text' | 'invisible';
    /**
     * When true, fallback language will be preloaded on Tolgee.run
     */
    preloadFallback?: boolean;
    private _targetElement?;
    constructor(config?: TolgeeConfig);
}
export {};
