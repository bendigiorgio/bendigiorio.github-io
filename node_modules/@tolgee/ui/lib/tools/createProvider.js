var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useCallback, useRef } from 'react';
import { createContext, useContextSelector } from 'use-context-selector';
export var createProvider = function (body) {
    var StateContext = createContext(null);
    var DispatchContext = React.createContext(null);
    var Provider = function (_a) {
        var children = _a.children, props = __rest(_a, ["children"]);
        var _b = __read(body(props), 2), state = _b[0], _dispatch = _b[1];
        var dispatchRef = useRef(_dispatch);
        dispatchRef.current = _dispatch;
        // stable dispatch function
        var dispatch = useCallback(function (action) { var _a; return (_a = dispatchRef.current) === null || _a === void 0 ? void 0 : _a.call(dispatchRef, action); }, [dispatchRef]);
        return (React.createElement(StateContext.Provider, { value: state },
            React.createElement(DispatchContext.Provider, { value: dispatch }, children)));
    };
    var useDispatch = function () { return React.useContext(DispatchContext); };
    var useStateContext = function (selector) {
        return useContextSelector(StateContext, selector);
    };
    return [Provider, useDispatch, useStateContext];
};
//# sourceMappingURL=createProvider.js.map