var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { useDialogContext, useDialogDispatch, } from './TranslationDialogContextProvider';
import { styled } from '@mui/material/styles';
import TextField from '@mui/material/TextField';
import { keyframes } from '@mui/styled-engine';
import { ScFieldTitle } from '../common/FieldTitle';
import { isLanguagePermitted } from '../tools/isLanguagePermitted';
var inputLoading = keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  0%   { background-position: 0%; }\n  100% { background-position: 100%; }\n"], ["\n  0%   { background-position: 0%; }\n  100% { background-position: 100%; }\n"])));
var ScTextField = styled(TextField)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  margin: 0px;\n  & .Mui-disabled {\n    background: ", ";\n  }\n"], ["\n  margin: 0px;\n  & .Mui-disabled {\n    background: ", ";\n  }\n"])), function (_a) {
    var theme = _a.theme;
    return theme.palette.grey[200];
});
var LoadingTextArea = styled('div')(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  margin-top: 10px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  width: 100%;\n  border-radius: 5px;\n  font-style: inherit;\n  font-family: inherit;\n  box-sizing: border-box;\n  display: block;\n  height: 42px;\n  background: linear-gradient(\n    90deg,\n    rgba(0, 0, 0, 0),\n    rgba(0, 0, 0, 0),\n    rgba(0, 0, 0, 0.1),\n    rgba(0, 0, 0, 0),\n    rgba(0, 0, 0, 0)\n  );\n  background-size: 500% 500%;\n  animation: ", " 1.5s linear infinite alternate;\n"], ["\n  margin-top: 10px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  width: 100%;\n  border-radius: 5px;\n  font-style: inherit;\n  font-family: inherit;\n  box-sizing: border-box;\n  display: block;\n  height: 42px;\n  background: linear-gradient(\n    90deg,\n    rgba(0, 0, 0, 0),\n    rgba(0, 0, 0, 0),\n    rgba(0, 0, 0, 0.1),\n    rgba(0, 0, 0, 0),\n    rgba(0, 0, 0, 0)\n  );\n  background-size: 500% 500%;\n  animation: ", " 1.5s linear infinite alternate;\n"])), inputLoading);
export var TranslationFields = function () {
    var dispatch = useDialogDispatch();
    var selectedLanguages = useDialogContext(function (c) { return c.selectedLanguages; });
    var availableLanguages = useDialogContext(function (c) { return c.availableLanguages; });
    var translationsForm = useDialogContext(function (c) { return c.translationsForm; });
    var formDisabled = useDialogContext(function (c) { return c.formDisabled; });
    var loading = useDialogContext(function (c) { return c.loading; });
    var properties = useDialogContext(function (c) { return c.dependencies.properties; });
    var onChange = function (key) { return function (e) {
        dispatch({
            type: 'ON_INPUT_CHANGE',
            payload: { key: key, value: e.target.value },
        });
    }; };
    var Loading = function () { return (React.createElement(React.Fragment, null, selectedLanguages ? (__spreadArray([], __read(selectedLanguages), false).map(function (lang) { return React.createElement(LoadingTextArea, { key: lang }); })) : (React.createElement(LoadingTextArea, null)))); };
    return (React.createElement(React.Fragment, null, loading ? (React.createElement(Loading, null)) : (__spreadArray([], __read(selectedLanguages), false).map(function (key) {
        var lang = availableLanguages === null || availableLanguages === void 0 ? void 0 : availableLanguages.find(function (l) { return l.tag === key; });
        var languagePermitted = isLanguagePermitted(key, properties.permittedLanguageIds, availableLanguages);
        return (React.createElement(React.Fragment, { key: key },
            React.createElement(ScFieldTitle, null, (lang === null || lang === void 0 ? void 0 : lang.name) || key),
            React.createElement(ScTextField, { size: "small", disabled: formDisabled || !languagePermitted, key: key, inputProps: {
                    lang: key,
                }, minRows: 2, maxRows: Infinity, multiline: true, fullWidth: true, value: translationsForm[key] || '', onChange: onChange(key) })));
    }))));
};
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=TranslationFields.js.map