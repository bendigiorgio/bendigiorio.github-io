var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useEffect, useState } from 'react';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogContent from '@mui/material/DialogContent';
import { styled } from '@mui/material/styles';
import { DEVTOOLS_Z_INDEX, CHROME_EXTENSION_LINK } from '../../constants';
var ScTitle = styled('div')(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: flex;\n  margin: 0px 0px 26px 0px;\n  font-size: 19px;\n"], ["\n  display: flex;\n  margin: 0px 0px 26px 0px;\n  font-size: 19px;\n"])));
var ScText = styled('div')(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  margin: 8px 0px;\n"], ["\n  margin: 8px 0px;\n"])));
var ScControls = styled('div')(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  display: flex;\n  justify-content: flex-end;\n  margin: ", ";\n  min-height: 36px;\n"], ["\n  display: flex;\n  justify-content: flex-end;\n  margin: ", ";\n  min-height: 36px;\n"])), function (_a) {
    var theme = _a.theme;
    return theme.spacing(1);
});
export var ExtensionPrompt = function (_a) {
    var onClose = _a.onClose;
    var _b = __read(useState(false), 2), installClicked = _b[0], setInstallClicked = _b[1];
    var onReload = function () {
        window.location.reload();
    };
    useEffect(function () {
        var handler = function () {
            setInstallClicked(true);
        };
        // act like extension was installed after user returns to this window
        window.addEventListener('focus', handler);
        return function () { return window.removeEventListener('focus', handler); };
    }, []);
    return (React.createElement(Dialog, { open: true, disableEnforceFocus: true, disablePortal: true, style: { zIndex: DEVTOOLS_Z_INDEX }, onClose: onClose }, installClicked ? (React.createElement(React.Fragment, null,
        React.createElement(DialogContent, null,
            React.createElement(ScTitle, null, "Browser extension required"),
            React.createElement(ScText, null, "After installing the extension, you need to reload this page.")),
        React.createElement(ScControls, null,
            React.createElement(Button, { onClick: onReload, color: "primary", variant: "contained" }, "Reload")))) : (React.createElement(React.Fragment, null,
        React.createElement(DialogContent, null,
            React.createElement(ScTitle, null, "Browser extension required"),
            React.createElement(ScText, null, "To make automatic screenshots please install Tolgee browser extension.")),
        React.createElement(ScControls, null,
            React.createElement(Button, { onClick: onClose, color: "secondary" }, "Cancel"),
            React.createElement(Button, { component: "a", color: "primary", variant: "contained", style: { marginLeft: 10 }, href: CHROME_EXTENSION_LINK, rel: "noreferrer noopener", target: "_blank" }, "Install"))))));
};
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=ExtensionPrompt.js.map