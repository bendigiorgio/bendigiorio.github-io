var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useRef, useState } from 'react';
import CircularProgress from '@mui/material/CircularProgress';
import IconButton from '@mui/material/IconButton';
import Tooltip from '@mui/material/Tooltip';
import { styled } from '@mui/material/styles';
import AddCircleOutline from '@mui/icons-material/AddCircleOutline';
import CameraAlt from '@mui/icons-material/CameraAlt';
import { ScreenshotDropzone } from './ScreenshotDropzone';
import { ScreenshotThumbnail } from './ScreenshotThumbnail';
import { MAX_FILE_COUNT } from './utils';
import { DEVTOOLS_Z_INDEX } from '../../constants';
import { useDialogContext, useDialogDispatch, } from '../TranslationDialogContextProvider';
import { ScreenshotDetail } from './ScreenshotDetail';
import { ScFieldTitle } from '../../common/FieldTitle';
import { ExtensionPrompt } from './ExtensionPrompt';
var ScPlaceholder = styled('div')(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: column;\n  height: 100px;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  flex-grow: 1;\n  border: 1px dashed lightgrey;\n"], ["\n  display: flex;\n  flex-direction: column;\n  height: 100px;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  flex-grow: 1;\n  border: 1px dashed lightgrey;\n"])));
var ScScreenshotDummy = styled('div')(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: flex;\n  width: 100px;\n  height: 100px;\n  align-items: center;\n  justify-content: center;\n  margin: 1px;\n"], ["\n  display: flex;\n  width: 100px;\n  height: 100px;\n  align-items: center;\n  justify-content: center;\n  margin: 1px;\n"])));
var ScHeading = styled('div')(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n"], ["\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n"])));
var ScControls = styled('div')(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  display: flex;\n"], ["\n  display: flex;\n"])));
var ScText = styled('div')(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  color: ", ";\n"], ["\n  color: ", ";\n"])), function (_a) {
    var theme = _a.theme;
    return theme.palette.text.secondary;
});
var ALLOWED_UPLOAD_TYPES = ['image/png', 'image/jpeg', 'image/gif'];
export var ScreenshotGallery = function () {
    var fileRef = useRef(null);
    var dispatch = useDialogDispatch();
    var screenshots = useDialogContext(function (c) { return c.screenshots; });
    var screenshotDetails = useDialogContext(function (c) { return c.screenshotDetail; });
    var pluginAvailable = useDialogContext(function (c) { return c.pluginAvailable; });
    var dependencies = useDialogContext(function (c) { return c.dependencies; });
    var formDisabled = useDialogContext(function (c) { return c.formDisabled; });
    var screenshotsUploading = useDialogContext(function (c) { return c.screenshotsUploading; });
    var uploadImages = function (files) {
        dispatch({ type: 'HANDLE_UPLOAD_IMAGES', payload: { files: files } });
    };
    var removeScreenshot = function (id) {
        dispatch({ type: 'HANDLE_REMOVE_SCREENSHOT', payload: { id: id } });
    };
    var takeScreenshot = function () {
        dispatch({ type: 'HANDLE_TAKE_SCREENSHOT' });
    };
    var _a = __read(useState(false), 2), extensionPrompt = _a[0], setExtensionPrompt = _a[1];
    var uploadEnabled = dependencies.coreService.isAuthorizedTo('screenshots.upload') &&
        !formDisabled;
    var deleteEnabled = dependencies.coreService.isAuthorizedTo('screenshots.delete') &&
        !formDisabled;
    function onFileSelected(e) {
        var files = e.target.files;
        if (!files) {
            return;
        }
        var toUpload = [];
        for (var i = 0; i < files.length; i++) {
            var item = files.item(i);
            if (item) {
                toUpload.push(item);
            }
        }
        validateAndUpload(toUpload);
    }
    var validate = function (files) {
        var errors = [];
        if (files.length > MAX_FILE_COUNT) {
            errors.push('Too many files');
        }
        files.forEach(function (file) {
            if (ALLOWED_UPLOAD_TYPES.indexOf(file.type) < 0) {
                errors.push("".concat(file.name, ": unsupported format"));
            }
        });
        var valid = errors.length === 0;
        return { errors: errors, valid: valid };
    };
    var validateAndUpload = function (files) {
        var valid = validate(files).valid;
        if (valid) {
            uploadImages(files);
        }
    };
    var onFileSelect = function () {
        var _a;
        (_a = fileRef.current) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new MouseEvent('click'));
    };
    var ableToTakeScreenshot = pluginAvailable;
    // @ts-ignore
    var isChrome = Boolean(window.chrome);
    return (React.createElement(React.Fragment, null,
        React.createElement("input", { type: "file", style: { display: 'none' }, ref: fileRef, onChange: function (e) { return onFileSelected(e); }, multiple: true, accept: ALLOWED_UPLOAD_TYPES.join(',') }),
        React.createElement(ScHeading, null,
            React.createElement(ScFieldTitle, null, "Screenshots"),
            React.createElement(ScControls, null, uploadEnabled && (React.createElement(React.Fragment, null,
                (isChrome || ableToTakeScreenshot) && (React.createElement(Tooltip, { title: "Take screenshot", PopperProps: {
                        disablePortal: true,
                        style: { zIndex: DEVTOOLS_Z_INDEX },
                    } },
                    React.createElement(IconButton, { onClick: ableToTakeScreenshot
                            ? takeScreenshot
                            : function () { return setExtensionPrompt(true); } },
                        React.createElement(CameraAlt, null)))),
                React.createElement(Tooltip, { title: "Add image", PopperProps: {
                        disablePortal: true,
                        style: { zIndex: DEVTOOLS_Z_INDEX },
                    } },
                    React.createElement(IconButton, { onClick: onFileSelect },
                        React.createElement(AddCircleOutline, null))))))),
        React.createElement(ScreenshotDropzone, { validateAndUpload: validateAndUpload, enabled: uploadEnabled },
            screenshots.length
                ? screenshots.map(function (ss) { return (React.createElement(ScreenshotThumbnail, { key: ss.id, data: ss, onClick: function () {
                        return dispatch({ type: 'OPEN_SCREENSHOT_DETAIL', payload: ss });
                    }, onDelete: deleteEnabled || ss.justUploaded
                        ? removeScreenshot
                        : undefined })); })
                : null,
            screenshotsUploading && (React.createElement(ScScreenshotDummy, null,
                React.createElement(CircularProgress, null))),
            !screenshots.length && !screenshotsUploading && (React.createElement(ScPlaceholder, { style: { cursor: uploadEnabled ? 'pointer' : 'default' }, onClick: uploadEnabled ? onFileSelect : undefined },
                React.createElement(ScText, null,
                    "There are no screenshots.",
                    ableToTakeScreenshot &&
                        uploadEnabled &&
                        ' Take screenshot by camera icon.'),
                uploadEnabled && (React.createElement(ScText, null, "Add some by dropping or clicking on plus."))))),
        screenshotDetails && (React.createElement(ScreenshotDetail, { screenshot: screenshotDetails, onClose: function () { return dispatch({ type: 'CLOSE_SCREENSHOT_DETAIL' }); } })),
        extensionPrompt && (React.createElement(ExtensionPrompt, { onClose: function () { return setExtensionPrompt(false); } }))));
};
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
//# sourceMappingURL=ScreenshotGallery.js.map