var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import Checkbox from '@mui/material/Checkbox';
import ListItemText from '@mui/material/ListItemText';
import OutlinedInput from '@mui/material/OutlinedInput';
import FormControl from '@mui/material/FormControl';
import { styled } from '@mui/material/styles';
import { DEVTOOLS_Z_INDEX } from '../constants';
import { useDialogContext, useDialogDispatch, } from './TranslationDialogContextProvider';
var ScFormControl = styled(FormControl)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  min-width: 200px;\n"], ["\n  min-width: 200px;\n"])));
export var LanguageSelect = function () {
    var dispatch = useDialogDispatch();
    var availableLanguages = useDialogContext(function (c) { return c.availableLanguages; });
    var selectedLanguages = useDialogContext(function (c) { return c.selectedLanguages; });
    var options = availableLanguages
        ? __spreadArray([], __read(availableLanguages), false).map(function (lang) { return ({
            label: lang.name,
            value: lang.tag,
        }); })
        : [];
    var selected = options.filter(function (o) { return selectedLanguages.has(o.value); });
    var onChange = function (e) {
        var value = e.target.value;
        var languages = new Set(typeof value === 'string' ? value.split(',') : value);
        dispatch({
            type: 'ON_SELECTED_LANGUAGES_CHANGE',
            payload: { languages: languages },
        });
    };
    return (React.createElement(React.Fragment, null, availableLanguages && (React.createElement(ScFormControl, { variant: "outlined", size: "small", style: { maxWidth: 250 } },
        React.createElement(Select, { multiple: true, value: selected.map(function (o) { return o.value; }), onChange: function (value) { return onChange(value); }, input: React.createElement(OutlinedInput, null), renderValue: function (selected) { return selected.join(', '); }, MenuProps: {
                style: { zIndex: DEVTOOLS_Z_INDEX },
                disablePortal: true,
            } }, options.map(function (option) { return (React.createElement(MenuItem, { key: option.value, value: option.value, dense: true },
            React.createElement(Checkbox, { size: "small", checked: Boolean(selected.find(function (o) { return o.value === option.value; })) }),
            React.createElement(ListItemText, null, option.label))); }))))));
};
var templateObject_1;
//# sourceMappingURL=LanguageSelect.js.map