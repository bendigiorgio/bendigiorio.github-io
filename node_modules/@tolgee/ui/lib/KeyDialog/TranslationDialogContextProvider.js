var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
import { useEffect, useState } from 'react';
import { sleep } from '../tools/sleep';
import { createProvider } from '../tools/createProvider';
import { isLanguagePermitted } from '../tools/isLanguagePermitted';
import { putBaseLangFirst, putBaseLangFirstTags } from './languageHelpers';
var MAX_LANGUAGES_SELECTED = 5;
var responseToTranslationData = function (data) {
    var translations = {};
    if (data) {
        Object.entries(data).forEach(function (_a) {
            var _b = __read(_a, 2), language = _b[0], translation = _b[1];
            return (translations[language] = translation.text);
        });
    }
    return translations;
};
export var DialogProvider = (_a = __read(createProvider(function (props) {
    var _a = __read(useState(true), 2), loading = _a[0], setLoading = _a[1];
    var _b = __read(useState(false), 2), saving = _b[0], setSaving = _b[1];
    var _c = __read(useState(false), 2), success = _c[0], setSuccess = _c[1];
    var _d = __read(useState(null), 2), error = _d[0], setError = _d[1];
    var _e = __read(useState(false), 2), takingScreenshot = _e[0], setTakingScreenshot = _e[1];
    var _f = __read(useState(null), 2), translations = _f[0], setTranslations = _f[1];
    var _g = __read(useState(null), 2), translationsForm = _g[0], setTranslationsForm = _g[1];
    var _h = __read(useState(false), 2), translationsFormTouched = _h[0], setTranslationsFormTouched = _h[1];
    var coreService = props.dependencies.coreService;
    var properties = props.dependencies.properties;
    var linkToPlatform = properties.projectId !== undefined
        ? "".concat(properties.config.apiUrl, "/projects/").concat(properties.projectId, "/translations/single?key=").concat(props.input)
        : undefined;
    var translationService = props.dependencies.translationService;
    var screenshotService = props.dependencies.screenshotService;
    var _j = __read(useState(undefined), 2), container = _j[0], setContainer = _j[1];
    var _k = __read(useState(false), 2), useBrowserWindow = _k[0], setUseBrowserWindow = _k[1];
    var _l = __read(useState([]), 2), screenshots = _l[0], setScreenshots = _l[1];
    var _m = __read(useState(false), 2), screenshotsUploading = _m[0], setScreenshotsUploading = _m[1];
    var _o = __read(useState(null), 2), screenshotDetail = _o[0], setScreenshotDetail = _o[1];
    var permittedLanguageIds = props.dependencies.properties.permittedLanguageIds;
    var dispatch = function (action) { return __awaiter(void 0, void 0, void 0, function () {
        var _a, _b, _c, reinitialize_1, languages, data, blob, id_1, screenshot, newTranslations_1, e_1, uploadedScreenshots, languages;
        var _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _a = action.type;
                    switch (_a) {
                        case 'ON_INPUT_CHANGE': return [3 /*break*/, 1];
                        case 'LOAD_TRANSLATIONS': return [3 /*break*/, 2];
                        case 'HANDLE_UPLOAD_IMAGES': return [3 /*break*/, 3];
                        case 'HANDLE_TAKE_SCREENSHOT': return [3 /*break*/, 5];
                        case 'HANDLE_REMOVE_SCREENSHOT': return [3 /*break*/, 9];
                        case 'ON_SAVE': return [3 /*break*/, 10];
                        case 'ON_CLOSE': return [3 /*break*/, 23];
                        case 'ON_SELECTED_LANGUAGES_CHANGE': return [3 /*break*/, 24];
                        case 'SET_CONTAINER': return [3 /*break*/, 25];
                        case 'SET_USE_BROWSER_WINDOW': return [3 /*break*/, 26];
                        case 'OPEN_SCREENSHOT_DETAIL': return [3 /*break*/, 27];
                        case 'CLOSE_SCREENSHOT_DETAIL': return [3 /*break*/, 28];
                    }
                    return [3 /*break*/, 29];
                case 1:
                    setSuccess(false);
                    setTranslationsFormTouched(true);
                    setTranslationsForm(__assign(__assign({}, translationsForm), (_d = {}, _d[action.payload.key] = action.payload.value, _d)));
                    return [3 /*break*/, 29];
                case 2:
                    {
                        _b = action.payload, _c = _b.reinitialize, reinitialize_1 = _c === void 0 ? true : _c, languages = _b.languages;
                        translationService
                            .getTranslationsOfKey(props.input, languages)
                            .then(function (_a) {
                            var _b;
                            var _c = __read(_a, 2), result = _c[0], languages = _c[1];
                            setTranslations(result || {
                                keyId: undefined,
                                translations: {},
                                screenshots: [],
                                keyName: props.input,
                                keyTags: [],
                                screenshotCount: 0,
                            });
                            if (!(selectedLanguages === null || selectedLanguages === void 0 ? void 0 : selectedLanguages.size)) {
                                setSelectedLanguages(new Set(languages));
                            }
                            var translationsData = responseToTranslationData(result === null || result === void 0 ? void 0 : result.translations);
                            if (!translationsForm || reinitialize_1) {
                                // reset form
                                setTranslationsForm(translationsData);
                                setScreenshots(((_b = result === null || result === void 0 ? void 0 : result.screenshots) === null || _b === void 0 ? void 0 : _b.map(function (sc) { return (__assign(__assign({}, sc), { justUploaded: false })); })) || []);
                            }
                            else {
                                // update form
                                var result_1 = {};
                                languages.forEach(function (lng) {
                                    result_1[lng] = translationsForm[lng] || translationsData[lng];
                                });
                                setTranslationsForm(result_1);
                            }
                            setLoading(false);
                        });
                        return [3 /*break*/, 29];
                    }
                    _e.label = 3;
                case 3:
                    setScreenshotsUploading(true);
                    return [4 /*yield*/, Promise.all(action.payload.files.map(uploadImage))];
                case 4:
                    _e.sent();
                    setScreenshotsUploading(false);
                    return [3 /*break*/, 29];
                case 5:
                    setTakingScreenshot(true);
                    return [4 /*yield*/, props.dependencies.pluginManager.takeScreenshot({
                            key: props.input,
                            translations: translationsForm,
                        })];
                case 6:
                    data = _e.sent();
                    setTakingScreenshot(false);
                    setScreenshotsUploading(true);
                    return [4 /*yield*/, fetch(data).then(function (r) { return r.blob(); })];
                case 7:
                    blob = _e.sent();
                    return [4 /*yield*/, uploadImage(blob)];
                case 8:
                    _e.sent();
                    setScreenshotsUploading(false);
                    return [3 /*break*/, 29];
                case 9:
                    {
                        id_1 = action.payload.id;
                        screenshot = screenshots.find(function (sc) { return sc.id === id_1; });
                        if (screenshot.justUploaded) {
                            screenshotService.deleteImages([screenshot.id]);
                        }
                        setScreenshots(screenshots.filter(function (sc) { return sc.id !== id_1; }));
                        return [3 /*break*/, 29];
                    }
                    _e.label = 10;
                case 10:
                    setSaving(true);
                    _e.label = 11;
                case 11:
                    _e.trys.push([11, 20, 21, 22]);
                    newTranslations_1 = {};
                    Object.entries(translationsForm).forEach(function (_a) {
                        var _b = __read(_a, 2), language = _b[0], value = _b[1];
                        if (isLanguagePermitted(language, permittedLanguageIds, availableLanguages)) {
                            newTranslations_1[language] = value;
                        }
                    });
                    if (!(translations.keyId === undefined)) return [3 /*break*/, 13];
                    return [4 /*yield*/, translationService.createKey({
                            name: props.input,
                            translations: newTranslations_1,
                            screenshotUploadedImageIds: screenshots.map(function (sc) { return sc.id; }),
                        })];
                case 12:
                    _e.sent();
                    return [3 /*break*/, 15];
                case 13: return [4 /*yield*/, translationService.updateKeyComplex(translations.keyId, {
                        name: props.input,
                        translations: newTranslations_1,
                        screenshotIdsToDelete: getRemovedScreenshots(),
                        screenshotUploadedImageIds: getJustUploadedScreenshots(),
                    })];
                case 14:
                    _e.sent();
                    _e.label = 15;
                case 15: return [4 /*yield*/, sleep(200)];
                case 16:
                    _e.sent();
                    setSuccess(true);
                    setError(null);
                    if (!useBrowserWindow) return [3 /*break*/, 18];
                    setSaving(false);
                    return [4 /*yield*/, sleep(2000)];
                case 17:
                    _e.sent();
                    setSuccess(false);
                    return [3 /*break*/, 19];
                case 18:
                    props.onClose();
                    _e.label = 19;
                case 19: return [3 /*break*/, 22];
                case 20:
                    e_1 = _e.sent();
                    setError('Unexpected error occurred :(');
                    // eslint-disable-next-line no-console
                    console.error(e_1);
                    return [3 /*break*/, 22];
                case 21:
                    setSaving(false);
                    return [7 /*endfinally*/];
                case 22: return [3 /*break*/, 29];
                case 23:
                    {
                        if (screenshotDetail) {
                            setScreenshotDetail(null);
                        }
                        else {
                            props.onClose();
                            setUseBrowserWindow(false);
                            uploadedScreenshots = getJustUploadedScreenshots();
                            if (uploadedScreenshots.length) {
                                screenshotService.deleteImages(uploadedScreenshots);
                            }
                            setScreenshots([]);
                        }
                        return [3 /*break*/, 29];
                    }
                    _e.label = 24;
                case 24:
                    {
                        languages = action.payload.languages;
                        if (languages.size) {
                            setSelectedLanguages(languages);
                            properties.preferredLanguages = languages;
                            dispatch({
                                type: 'LOAD_TRANSLATIONS',
                                payload: { languages: languages, reinitialize: false },
                            });
                        }
                        return [3 /*break*/, 29];
                    }
                    _e.label = 25;
                case 25:
                    setContainer(action.payload);
                    return [3 /*break*/, 29];
                case 26:
                    setUseBrowserWindow(action.payload);
                    return [3 /*break*/, 29];
                case 27:
                    setScreenshotDetail(action.payload);
                    return [3 /*break*/, 29];
                case 28:
                    setScreenshotDetail(null);
                    return [3 /*break*/, 29];
                case 29: return [2 /*return*/];
            }
        });
    }); };
    useEffect(function () {
        var onKeyDown = function (e) {
            if (e.key === 'Escape') {
                dispatch({ type: 'ON_ESCAPE' });
            }
        };
        if (!useBrowserWindow) {
            window.addEventListener('keydown', onKeyDown);
            return function () {
                window.removeEventListener('keydown', onKeyDown);
            };
        }
    }, [useBrowserWindow]);
    useEffect(function () {
        if (props.open) {
            setLoading(true);
            setSuccess(false);
            setError(null);
            setTranslationsFormTouched(false);
            dispatch({
                type: 'LOAD_TRANSLATIONS',
                payload: { languages: selectedLanguages },
            });
            if (availableLanguages === undefined) {
                coreService.getLanguagesFull().then(function (l) {
                    setAvailableLanguages(l);
                });
            }
        }
    }, [props.open, useBrowserWindow, props.input]);
    var getJustUploadedScreenshots = function () {
        return screenshots.filter(function (sc) { return sc.justUploaded; }).map(function (sc) { return sc.id; });
    };
    var getRemovedScreenshots = function () {
        var _a;
        return (_a = translations.screenshots) === null || _a === void 0 ? void 0 : _a.map(function (sc) { return sc.id; }).filter(function (scId) { return !screenshots.find(function (sc) { return sc.id === scId; }); });
    };
    var uploadImage = function (file) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, screenshotService
                        .uploadImage(file)
                        .then(function (data) {
                        return setScreenshots(function (screenshots) { return __spreadArray(__spreadArray([], __read(screenshots), false), [
                            __assign(__assign({}, data), { justUploaded: true }),
                        ], false); });
                    })
                        .catch(function (e) {
                        setError(e.code || e.message);
                    })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); };
    var formDisabled = loading ||
        (translations.keyId
            ? !coreService.isAuthorizedTo('translations.edit')
            : !coreService.isAuthorizedTo('keys.edit'));
    var _p = __read(useState(undefined), 2), availableLanguages = _p[0], _setAvailableLanguages = _p[1];
    var setAvailableLanguages = function (data) {
        _setAvailableLanguages(putBaseLangFirst(data));
    };
    var getInitialLanguages = function () {
        var langs = Array.from(properties.preferredLanguages || [properties.currentLanguage]);
        return new Set(langs.slice(0, MAX_LANGUAGES_SELECTED));
    };
    var _q = __read(useState(getInitialLanguages()), 2), selectedLanguages = _q[0], setSelectedLanguages = _q[1];
    // sets the default value for base language if is not stored already
    useEffect(function () {
        var _a;
        if (props.defaultValue &&
            availableLanguages &&
            selectedLanguages &&
            translationsForm) {
            var baseLanguageDefinition = availableLanguages.find(function (l) { return l.base; });
            if (baseLanguageDefinition &&
                selectedLanguages.has(baseLanguageDefinition.tag) &&
                !translationsFormTouched) {
                var wasBaseTranslationProvided = translations.translations[baseLanguageDefinition.tag] !== undefined;
                if (!translationsForm[baseLanguageDefinition.tag] &&
                    !wasBaseTranslationProvided) {
                    setTranslationsForm(__assign(__assign({}, translationsForm), (_a = {}, _a[baseLanguageDefinition.tag] = props.defaultValue, _a)));
                }
            }
        }
    }, [
        availableLanguages,
        translationsForm,
        selectedLanguages,
        props.defaultValue,
    ]);
    var baseLang = availableLanguages === null || availableLanguages === void 0 ? void 0 : availableLanguages.find(function (_a) {
        var base = _a.base;
        return base;
    });
    var contextValue = {
        input: props.input,
        dependencies: props.dependencies,
        open: props.open,
        loading: loading,
        saving: saving,
        success: success,
        error: error,
        availableLanguages: availableLanguages,
        selectedLanguages: putBaseLangFirstTags(selectedLanguages, baseLang === null || baseLang === void 0 ? void 0 : baseLang.tag),
        formDisabled: formDisabled,
        translations: translations,
        translationsForm: translationsForm,
        container: container,
        useBrowserWindow: useBrowserWindow,
        pluginAvailable: props.dependencies.pluginManager.handshakeSucceed,
        takingScreenshot: takingScreenshot,
        screenshotsUploading: screenshotsUploading,
        screenshots: screenshots,
        screenshotDetail: screenshotDetail,
        linkToPlatform: linkToPlatform,
    };
    return [contextValue, dispatch];
}), 3), _a[0]), useDialogDispatch = _a[1], useDialogContext = _a[2];
//# sourceMappingURL=TranslationDialogContextProvider.js.map